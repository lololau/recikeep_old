{"version":3,"sources":["i18n.ts","slice/user/userFetch.ts","slice/user/userSlice.ts","containers/profil/Profil.tsx","components/SearchBar.tsx","components/Tags.tsx","slice/recipes/recipesFetch.ts","slice/recipes/recipesSlice.ts","slice/recipe/recipeFetch.ts","slice/recipe/recipeSlice.ts","containers/recipes/Recipes.tsx","containers/recipe/Recipe.tsx","components/Autocomplete.tsx","slice/ingredients/ingredientsFetch.ts","slice/ingredients/ingredientsSlice.ts","slice/groups/groupsSlice.ts","slice/unity/unityFetch.ts","slice/unity/unitySlice.ts","slice/groceriesLists/groceriesListsFetch.ts","slice/groceriesLists/groceriesListsSlice.ts","slice/groceryList/groceryListFetch.ts","slice/groceryList/groceryListSlice.ts","app/store.ts","containers/new-recipe/NewRecipe.tsx","containers/update-recipe/UpdateRecipe.tsx","containers/toolsbar/Toolsbar.tsx","containers/grocery-list/GroceryList.tsx","components/List.tsx","containers/my-ingredients/MyIngredients.tsx","containers/stepper/RecipesSelection1.tsx","containers/stepper/RecipesSelection2.tsx","containers/stepper/RecipesSelection3.tsx","containers/stepper/RecipesSelection.tsx","containers/groups/Groups.tsx","containers/firebase/Firebase.tsx","containers/create-user/CreateUser.tsx","containers/my-unities/MyUnities.tsx","App.tsx","reportWebVitals.ts","containers/firebase/config.ts","index.tsx"],"names":["resources","en","translation","translationEN","fr","translationFR","i18n","use","initReactI18next","init","lng","GetUser","idToken","a","myHeaders","Headers","Authorization","fetch","headers","response","status","Error","json","jsonResponse","user","CreateUser","request","method","body","JSON","stringify","text","err","UpdateUser","fetchGetUser","createAsyncThunk","fetchCreateUser","req","thunkAPI","state","getState","fetchUpdateUser","userUpdated","userReducer","createSlice","name","initialState","id","firebaseId","fullName","email","isLoading","reducers","updateIdToken","action","payload","updateFirebaseUser","extraReducers","builder","addCase","pending","fulfilled","console","log","full_name","rejected","actions","selectUser","isLogged","isCreated","token","Profile","changeLanguage","t","useTranslation","useSelector","dispatch","useDispatch","useState","newName","setNewName","canUpdate","setCanUpdate","Container","Grid","container","spacing","item","xs","style","textAlign","Button","onClick","Box","alignItems","marginBottom","Avatar","width","height","alt","src","size","TextField","type","onChange","event","currentTarget","value","disabled","IconButton","fontSize","color","to","SearchBar","props","elements","searchTerm","setSearchTerm","filterElements","idList","filter","toLowerCase","includes","warn","map","elt","toString","onchange","useEffect","label","variant","newValue","TagBox","tagList","tag","Autocomplete","multiple","options","option","freeSolo","renderTags","getTagProps","index","Chip","key","renderInput","params","addRecipe","recipe","deleteRecipe","recipeId","getAllRecipes","recipes","fetchAddRecipe","fetchGetAllRecipes","fetchDeleteRecipe","recipesReducer","push","selectRecipes","getOneRecipe","updateRecipe","fetchGetARecipe","fetchUpdateRecipe","recipeReducer","number_parts","ingredients","selectRecipe","RecipesList","history","useHistory","List","ListItem","divider","ListItemText","primary","ListItemSecondaryAction","edge","HomeRecipes","recipesDisplay","setRecipesDisplay","className","ids","newRecipes","resultat","i","length","marginTop","IngredientsTable","TableContainer","component","Paper","maxWidth","Table","aria-label","TableHead","TableRow","TableCell","fontWeight","align","TableBody","row","scope","ingredient","quantity","unity","MyRecipe","useParams","Number","position","zIndex","top","backgroundColor","presentation","marginLeft","marginRight","time_preparation","time_cooking","display","justifyContent","createFilterOptions","Autosuggestion","Props","onSelect","onAdd","React","setValue","inputValue","newOption","filterOptions","filtered","selectOnFocus","clearOnBlur","handleHomeEndKeys","getOptionLabel","renderOption","getIngredients","addIngredient","deleteIngredient","ingredientId","fetchGetIngredientsByRecipes","ingredientsList","fetchGetIngredients","fetchAddIngredient","fetchDeleteIngredient","ingredientsReducer","groupReducer","groups","selectGroups","getUnities","unities","addUnity","deleteUnity","unityId","fetchGetUnities","fetchAddUnity","fetchDeleteUnity","unitiesReducer","addGroceryList","groceryList","fetchAddGroceryList","groceriesListsReducer","groceriesLists","getGroceryList","groceryListId","getLatestGroceryList","fetchGetAGroceryList","fetchGetLatestGroceryList","groceryListReducer","selectGroceryList","store","configureStore","reducer","groupsReducer","useAppDispatch","IngredientsList","onRemoveIngredient","NewRecipe","allIngredients","allUnities","newRecipe","setRecipe","ingredientsRow","setIngredientRow","ingredient_id","undefined","unity_id","ingredientRecipe","setIngredientRecipe","placeholder","fullWidth","Tags","margin","result","unwrapResult","newIngredientRow","concat","newingredientRow","_","error","UpdateRecipe","setUpdateRecipe","then","catch","e","ToolsBar","button","setButton","BottomNavigation","showLabels","BottomNavigationAction","icon","Link","CheckIngredientsList","ListItemIcon","Checkbox","checked","tabIndex","disableRipple","secondary","GroceryList","ListComponent","listElements","eltList","onRemoveElement","MyIngredients","ingredientsElements","modalOpen","setModalOpen","ingredientsDisplay","setIngredientsDisplay","newIngredients","user_id","Dialog","open","DialogTitle","DialogContent","DialogActions","flexDirection","SelectionRecipesList","setChecked","currentIndex","indexOf","newChecked","splice","filteredRecipes","SelectionRecipes","onSelected","SelectionPartsRecipes","defaultValue","setDefaultValue","parts","setParts","finalPartsRecipe","recipe_id","onPartsSelected","newValues","newState","newParts","SelectionParts","numberPartsByRecipe","onValidateNumberParts","onValidateList","AddMoreIngredients","newIngredientsList","setNewIngredientsList","list","onValidation","RecipesSelectionStepper","activeStep","setActiveStep","recipesSelected","setRecipesSelected","setnumberPartsByRecipe","setIngredientsList","MobileStepper","steps","nextButton","prevActiveStep","backButton","step","recipesSelect","getStepperComponent","Groups","groupsDisplay","setGroupsDisplay","newGroups","group","signUpWithEmailPassword","password","firebase","auth","createUserWithEmailAndPassword","signInWithEmailPassword","signInWithEmailAndPassword","Firebase","setEmail","setPassword","target","userCredential","errorCode","code","errorMessage","message","SignUp","fullN","setFullName","signOut","MyUnities","unitiesElements","unitiesList","unitiesCustomDisplay","setUnitiesCustomDisplay","newUnities","theme","createMuiTheme","palette","main","App","logged","created","onAuthStateChanged","newUser","uid","getIdToken","onIdTokenChanged","composant","path","exact","elevation","bottom","borderTop","background","ThemeProvider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","databaseURL","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c24cd9a0.chunk.js","sourcesContent":["import i18n from 'i18next';\nimport translationEN from './locales/en/translation.json';\nimport translationFR from './locales/fr/translation.json';\nimport { initReactI18next } from 'react-i18next';\n\nexport const resources = {\n    en: {\n        translation: translationEN,\n    },\n    fr: {\n        translation: translationFR,\n    },\n} as const;\n\ni18n.use(initReactI18next).init({\n    lng: 'fr',\n    resources,\n});\n\nexport default i18n;\n","export type User = {\n    id: number;\n    firebase_id: string;\n    full_name: string;\n};\n\nexport type ResponseGetUser = {\n    user: User;\n};\n\nexport const GetUser = async (idToken: string): Promise<User> => {\n    const myHeaders = new Headers({\n        Authorization: idToken,\n    });\n    const response = await fetch('http://localhost:3000/api/user/getUser', { headers: myHeaders });\n    if (response.status === 404) {\n        throw new Error('User not found');\n    }\n    const jsonResponse = await response.json();\n    return jsonResponse.user;\n};\n\nexport type RequestCreateUser = {\n    fullName: string;\n};\n\nexport type ResponseCreateUser = {\n    user: User;\n};\n\nexport const CreateUser = async (idToken: string, request: RequestCreateUser): Promise<ResponseCreateUser> => {\n    const myHeaders = new Headers({\n        Authorization: idToken,\n        'content-type': 'application/json',\n    });\n\n    const response = await fetch('http://localhost:3000/api/user/createUser', {\n        method: 'POST',\n        body: JSON.stringify(request),\n        headers: myHeaders,\n    });\n    if (response.status < 200 || response.status >= 300) {\n        const err = await response.text();\n        throw new Error('User not found: ' + err);\n    }\n\n    const body = await response.json();\n    return { user: body.user };\n};\n\nexport type RequestUpdateUser = {\n    fullName: string;\n};\n\nexport type ResponseUpdateUser = {\n    user: User;\n};\n\nexport const UpdateUser = async (idToken: string, request: RequestUpdateUser): Promise<ResponseUpdateUser> => {\n    const myHeaders = new Headers({\n        Authorization: idToken,\n        'content-type': 'application/json',\n    });\n\n    const response = await fetch('http://localhost:3000/api/user/updateUser', {\n        method: 'PUT',\n        body: JSON.stringify(request),\n        headers: myHeaders,\n    });\n    if (response.status < 200 || response.status >= 300) {\n        const err = await response.text();\n        throw new Error('User not found: ' + err);\n    }\n\n    const body = await response.json();\n    return { user: body.user };\n};\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport { GetUser, CreateUser, RequestCreateUser, UpdateUser, RequestUpdateUser } from './userFetch';\n\nexport interface User {\n    id: number;\n    isLoading: boolean;\n    firebaseId: string;\n    fullName: string;\n    idToken: string;\n    email: string;\n    image_profile?: Blob;\n}\n\nconst initialState: User = {\n    id: 0,\n    firebaseId: '',\n    fullName: '',\n    idToken: '',\n    email: '',\n    isLoading: false,\n};\n\nexport const fetchGetUser = createAsyncThunk('/api/user/getUser', async (idToken: string) => {\n    const user = await GetUser(idToken);\n    return user;\n});\n\nexport const fetchCreateUser = createAsyncThunk('/api/user/createUser', async (req: RequestCreateUser, thunkAPI) => {\n    const state = thunkAPI.getState() as RootState;\n    const user = await CreateUser(state.user.idToken, req);\n    return user;\n});\n\nexport const fetchUpdateUser = createAsyncThunk('/api/user/updateUser', async (req: RequestUpdateUser, thunkAPI) => {\n    const state = thunkAPI.getState() as RootState;\n    const userUpdated = await UpdateUser(state.user.idToken, req);\n    return userUpdated;\n});\n\nconst userReducer = createSlice({\n    name: 'user',\n    initialState: initialState,\n    reducers: {\n        updateIdToken: (state, action) => {\n            state.idToken = action.payload;\n        },\n        updateFirebaseUser: (state, action) => {\n            state.firebaseId = action.payload.firebaseId;\n            state.email = action.payload.email;\n        },\n    },\n    extraReducers: (builder) => {\n        // fetchGetUser\n        builder.addCase(fetchGetUser.pending, (state) => {\n            state.isLoading = true;\n        });\n        builder.addCase(fetchGetUser.fulfilled, (state, action) => {\n            state.isLoading = false;\n            console.log(action.payload);\n            state.fullName = action.payload.full_name;\n        });\n        builder.addCase(fetchGetUser.rejected, (state) => {\n            state.isLoading = false;\n            state.fullName = '';\n        });\n\n        // fetchCreateUser\n        builder.addCase(fetchCreateUser.pending, (state) => {\n            state.isLoading = true;\n        });\n        builder.addCase(fetchCreateUser.fulfilled, (state, action) => {\n            state.isLoading = false;\n            console.log(action.payload);\n            state.fullName = action.payload.user.full_name;\n        });\n        builder.addCase(fetchCreateUser.rejected, (state) => {\n            state.isLoading = false;\n            state.fullName = '';\n        });\n\n        // fetchUpdateUser\n        builder.addCase(fetchUpdateUser.pending, (state) => {\n            state.isLoading = true;\n        });\n        builder.addCase(fetchUpdateUser.fulfilled, (state, action) => {\n            state.isLoading = false;\n            console.log(action.payload);\n            state.fullName = action.payload.user.full_name;\n        });\n        builder.addCase(fetchUpdateUser.rejected, (state) => {\n            state.isLoading = false;\n        });\n    },\n});\n\nexport const { updateIdToken, updateFirebaseUser } = userReducer.actions;\n\nexport const selectUser = (state: RootState): User => state.user;\nexport const isLogged = (state: RootState): boolean => state.user.firebaseId !== '';\nexport const isCreated = (state: RootState): boolean => state.user.fullName !== '';\nexport const token = (state: RootState): string => state.user.idToken;\n\nexport default userReducer.reducer;\n","import '../../i18n';\nimport i18n from '../../i18n';\nimport React, { ChangeEvent, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport { Link } from 'react-router-dom';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Avatar from '@material-ui/core/Avatar';\nimport Container from '@material-ui/core/Container';\nimport CheckIcon from '@material-ui/icons/Check';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport { IconButton } from '@material-ui/core';\nimport { selectUser, fetchUpdateUser } from '../../slice/user/userSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport TextField from '@material-ui/core/TextField';\n\nconst Profile = (): JSX.Element => {\n    const changeLanguage = (lng: string) => {\n        i18n.changeLanguage(lng);\n    };\n    const { t } = useTranslation();\n\n    const user = useSelector(selectUser);\n\n    const dispatch = useDispatch();\n\n    const [newName, setNewName] = useState(user.fullName);\n    const [canUpdate, setCanUpdate] = useState(true);\n\n    const onNameChange = (event: ChangeEvent<HTMLInputElement>) => {\n        setNewName(event.currentTarget.value);\n    };\n\n    const notUpdateName = () => {\n        return (\n            <IconButton\n                onClick={() => {\n                    setCanUpdate(false);\n                }}\n            >\n                <EditIcon style={{ fontSize: 15 }} color=\"primary\" />\n            </IconButton>\n        );\n    };\n\n    const updateName = () => {\n        return (\n            <>\n                <IconButton\n                    onClick={() => {\n                        dispatch(fetchUpdateUser({ fullName: newName }));\n                        setCanUpdate(false);\n                    }}\n                >\n                    <CheckIcon />\n                </IconButton>\n                <Button\n                    onClick={() => {\n                        setNewName(user.fullName);\n                        setCanUpdate(true);\n                    }}\n                >\n                    Cancel\n                </Button>\n            </>\n        );\n    };\n\n    return (\n        <Container>\n            <Grid container spacing={4}>\n                <Grid item xs={6}>\n                    <h1>{t('profile.title-page')}</h1>\n                </Grid>\n                <Grid item xs={6} style={{ textAlign: 'right' }}>\n                    <Button onClick={() => changeLanguage('en')}>English</Button>\n                    <Button onClick={() => changeLanguage('fr')}>Français</Button>\n                </Grid>\n            </Grid>\n            <Box style={{ alignItems: 'column', marginBottom: 30 }}>\n                <Avatar\n                    style={{ width: 100, height: 100 }}\n                    alt=\"my_picture\"\n                    src=\"https://www.vetostore.com/media/wysiwyg/img_fiche_conseil/Alimentation-lapin-sevrage-1.jpg\"\n                />\n                <Button size=\"small\">{t('profile.update-image')}</Button>\n            </Box>\n            <Grid container spacing={2} style={{ alignItems: 'center', marginBottom: 10 }}>\n                <TextField type=\"text\" onChange={onNameChange} value={newName} disabled={canUpdate} />\n                {!canUpdate && updateName()}\n                {canUpdate && notUpdateName()}\n            </Grid>\n            <Grid container spacing={2} style={{ alignItems: 'center', marginBottom: 30 }}>\n                <p>{user.email}</p>\n            </Grid>\n\n            <Link to=\"/profile/my_ingredients\">\n                <p>{t('myIngredients.title-page')}</p>\n            </Link>\n\n            <Link to=\"/profile/my_unities\">\n                <p>{t('myUnities.title-page')}</p>\n            </Link>\n        </Container>\n    );\n};\n\nexport default Profile;\n","import React, { ChangeEvent, useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TextField, Box } from '@material-ui/core';\n\ninterface Element {\n    name: string;\n    id: number;\n}\n\ntype onChange = (ids: string[]) => void;\n\ntype SearchBarProps = {\n    width?: string;\n    onchange: onChange;\n    elements: Element[];\n};\n\nexport const filterSearchBar = (elts: Element[], filter: string[]): Element[] => {\n    return elts.filter((elt) => {\n        return filter.includes(elt.id.toString());\n    });\n};\n\nconst SearchBar = (props: SearchBarProps): JSX.Element => {\n    const { elements } = props;\n    const { t } = useTranslation();\n    const [searchTerm, setSearchTerm] = useState('');\n\n    const filterElements = (elements: Element[], value: string) => {\n        const idList = elements\n            .filter((item) => {\n                if (!item.id) {\n                    console.warn('error item got id undefined', item);\n                    return false;\n                }\n                if (value) {\n                    return item.name.toLowerCase().includes(value.toLowerCase());\n                }\n                return true;\n            })\n            .map((elt) => {\n                return elt.id.toString();\n            });\n\n        props.onchange(idList);\n    };\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const newValue = event.currentTarget.value;\n        setSearchTerm(newValue);\n        filterElements(elements, newValue);\n    };\n\n    useEffect(() => {\n        filterElements(elements, searchTerm);\n    }, [elements]);\n\n    return (\n        <Box>\n            <TextField\n                value={searchTerm}\n                label={t('groups.searchBar')}\n                variant=\"outlined\"\n                style={{ width: props.width }}\n                onChange={handleChange}\n            />\n        </Box>\n    );\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Chip from '@material-ui/core/Chip';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { useTranslation } from 'react-i18next';\n\ntype TagOption = {\n    tag: string;\n    inputTag?: string;\n    id: string;\n};\n\nconst TagBox = (): JSX.Element => {\n    const { t } = useTranslation();\n\n    const tagList: TagOption[] = [\n        { tag: t('tags.vegetables'), id: '0' },\n        { tag: t('tags.meat'), id: '1' },\n        { tag: t('tags.fish'), id: '2' },\n        { tag: t('tags.fruits'), id: '3' },\n        { tag: t('tags.appetizer'), id: '4' },\n        { tag: t('tags.starter'), id: '5' },\n        { tag: t('tags.lunch'), id: '6' },\n        { tag: t('tags.dinner'), id: '7' },\n        { tag: t('tags.dessert'), id: '8' },\n        { tag: t('tags.sides'), id: '9' },\n    ];\n\n    return (\n        <Autocomplete\n            multiple\n            id=\"tags-filled\"\n            options={tagList.map((option) => option.tag)}\n            freeSolo\n            renderTags={(value: string[], getTagProps) =>\n                value.map((option: string, index: number) => (\n                    <Chip variant=\"outlined\" label={option} {...getTagProps({ index })} key={'TagBox' + index} />\n                ))\n            }\n            renderInput={(params) => <TextField {...params} variant=\"filled\" label=\"Tags\" />}\n        />\n    );\n};\n\nexport default TagBox;\n","export interface Recipe {\n    id: number;\n    name: string;\n    presentation?: string;\n    number_parts: number;\n    time_preparation?: string;\n    time_cooking?: string;\n    user_id: number;\n    recipe_photo_id?: number;\n    recipe_description_id?: number;\n}\n\ninterface IngredientsRecipe {\n    ingredient_id?: number;\n    unity_id?: number;\n    quantity?: number;\n}\n\nexport type RequestAddRecipe = {\n    name: string;\n    presentation?: string;\n    number_parts: number;\n    time_preparation?: string;\n    time_cooking?: string;\n    recipe_photo_id?: number;\n    recipe_description_id?: number;\n    ingredients?: IngredientsRecipe[];\n};\n\n// Fetch to addRecipe into user db\nexport const addRecipe = async (idToken: string, req: RequestAddRecipe): Promise<Recipe> => {\n    const myHeaders = new Headers({\n        Authorization: idToken,\n        'content-type': 'application/json',\n    });\n    const response = await fetch(`http://localhost:3000/api/recipes/add/`, {\n        method: 'POST',\n        body: JSON.stringify(req),\n        headers: myHeaders,\n    });\n    if (response.status < 200 || response.status >= 300) {\n        const err = await response.text();\n        throw new Error('Recipe not added: ' + err);\n    }\n    const recipe = await response.json();\n    return recipe.recipe;\n};\n\nexport const deleteRecipe = async (idToken: string, recipeId: number): Promise<void> => {\n    const myHeaders = new Headers({\n        Authorization: idToken,\n        'content-type': 'application/json',\n    });\n    const response = await fetch(`http://localhost:3000/api/recipes/delete/${recipeId}`, {\n        headers: myHeaders,\n        method: 'DELETE',\n    });\n    if (response.status < 200 || response.status >= 300) {\n        const err = await response.text();\n        throw new Error('Recipe not deleted: ' + err);\n    }\n};\n\n//Fetch to get all recipes by user\nexport const getAllRecipes = async (idToken: string): Promise<Recipe[]> => {\n    const myHeaders = new Headers({\n        Authorization: idToken,\n    });\n    const response = await fetch(`http://localhost:3000/api/recipes/getAll/`, {\n        headers: myHeaders,\n    });\n    if (response.status === 404) {\n        throw new Error('Recipes not found');\n    }\n    const jsonResponse = await response.json();\n    return jsonResponse.recipes;\n};\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport { Recipe, RequestAddRecipe, addRecipe, deleteRecipe, getAllRecipes } from './recipesFetch';\n\nexport const fetchAddRecipe = createAsyncThunk('/api/recipes/add', async (request: RequestAddRecipe, thunkAPI) => {\n    const state = thunkAPI.getState() as RootState;\n    const recipe = await addRecipe(state.user.idToken, request);\n    console.log(recipe);\n    return recipe;\n});\n\nexport const fetchGetAllRecipes = createAsyncThunk('/api/recipes/getAll', async (idToken: string) => {\n    const recipes = await getAllRecipes(idToken);\n    return recipes;\n});\n\nexport const fetchDeleteRecipe = createAsyncThunk(`/api/recipes/delete`, async (recipeId: number, thunkAPI) => {\n    const state = thunkAPI.getState() as RootState;\n    await deleteRecipe(state.user.idToken, recipeId);\n    return recipeId;\n});\n\ntype RecipeList = {\n    recipes: Recipe[];\n};\n\nconst initialState: RecipeList = {\n    recipes: [],\n};\n\nconst recipesReducer = createSlice({\n    name: 'recipes',\n    initialState: initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        // fetchGetRecipes\n        builder.addCase(fetchGetAllRecipes.fulfilled, (state, action) => {\n            state.recipes = action.payload;\n        });\n        builder.addCase(fetchGetAllRecipes.rejected, (state) => {\n            state.recipes = [];\n        });\n        // fetchAddRecipe\n        builder.addCase(fetchAddRecipe.fulfilled, (state, action) => {\n            state.recipes.push(action.payload);\n        });\n        // fetchDeleteRecipe\n        builder.addCase(fetchDeleteRecipe.fulfilled, (state, action) => {\n            state.recipes = state.recipes.filter((recipe) => recipe.id !== action.payload);\n        });\n    },\n});\n\nexport const selectRecipes = (state: RootState): Recipe[] => state.recipes.recipes;\nexport const selectRecipe = (state: RootState, index: number): Recipe => state.recipes.recipes[index];\n\nexport default recipesReducer.reducer;\n","export interface IngredientsRecipe {\n    ingredient_id?: number;\n    ingredient: string;\n    unity_id?: number;\n    unity: string;\n    quantity?: number;\n}\n\nexport interface RecipeInformation {\n    id?: number;\n    name: string;\n    presentation?: string;\n    number_parts: number;\n    time_preparation?: string;\n    time_cooking?: string;\n    recipe_photo_id?: number;\n    recipe_description_id?: number;\n    ingredients: IngredientsRecipe[];\n}\n\n// Fetch to get a recipe by recipeId\nexport const getOneRecipe = async (idToken: string, recipeId: number): Promise<RecipeInformation> => {\n    const myHeaders = new Headers({\n        Authorization: idToken,\n    });\n    const response = await fetch(`http://localhost:3000/api/recipes/${recipeId}`, {\n        headers: myHeaders,\n    });\n    if (response.status === 404) {\n        throw new Error('Recipe not found');\n    }\n    const jsonResponse = await response.json();\n    return jsonResponse.recipe;\n};\n\nexport type RequestUpdateRecipe = {\n    recipe: RecipeInformation;\n};\n\n// Fetch to update a recipe by recipeId\nexport const updateRecipe = async (idToken: string, req: RequestUpdateRecipe): Promise<RecipeInformation> => {\n    const myHeaders = new Headers({\n        Authorization: idToken,\n        'content-type': 'application/json',\n    });\n\n    if (!req.recipe.id) {\n        throw new Error('no id given');\n    }\n\n    const response = await fetch(`http://localhost:3000/api/recipes/update/${req.recipe.id}`, {\n        method: 'PUT',\n        body: JSON.stringify(req.recipe),\n        headers: myHeaders,\n    });\n    if (response.status < 200 || response.status >= 300) {\n        const err = await response.text();\n        throw new Error('Recipe not updated: ' + err);\n    }\n    const recipe = await response.json();\n    return recipe.recipe;\n};\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport { getOneRecipe, RecipeInformation, RequestUpdateRecipe, updateRecipe } from './recipeFetch';\n\nexport const fetchGetARecipe = createAsyncThunk(`/api/recipes/:id`, async (recipeId: number, thunkAPI) => {\n    const state = thunkAPI.getState() as RootState;\n    const recipe = await getOneRecipe(state.user.idToken, recipeId);\n    return recipe;\n});\n\nexport const fetchUpdateRecipe = createAsyncThunk(\n    `/api/recipes/update/:id`,\n    async (req: RequestUpdateRecipe, thunkAPI) => {\n        const state = thunkAPI.getState() as RootState;\n        const recipe = await updateRecipe(state.user.idToken, req);\n        return recipe;\n    },\n);\n\ntype Recipe = {\n    recipe: RecipeInformation;\n};\n\nconst initialState: Recipe = {\n    recipe: {\n        name: '',\n        number_parts: 0,\n        ingredients: [],\n    },\n};\n\nconst recipeReducer = createSlice({\n    name: 'recipe',\n    initialState: initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        // fetchGetRecipes\n        builder.addCase(fetchGetARecipe.fulfilled, (state, action) => {\n            state.recipe = action.payload;\n        });\n        // fetchUpdateRecipe\n        builder.addCase(fetchUpdateRecipe.fulfilled, (state, action) => {\n            state.recipe = action.payload;\n        });\n    },\n});\n\nexport const selectRecipe = (state: RootState): RecipeInformation => state.recipe.recipe;\n\nexport default recipeReducer.reducer;\n","import '../../i18n';\nimport { Link, useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport SearchBar from '../../components/SearchBar';\nimport TagBox from '../../components/Tags';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport AddCircleOutlineOutlinedIcon from '@material-ui/icons/AddCircleOutlineOutlined';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport { fetchDeleteRecipe, selectRecipes } from '../../slice/recipes/recipesSlice';\nimport { fetchGetARecipe } from '../../slice/recipe/recipeSlice';\nimport { Recipe } from '../../slice/recipes/recipesFetch';\nimport { useSelector, useDispatch } from 'react-redux';\n\nexport type RecipesListProps = {\n    recipes: Recipe[];\n};\n\nexport const RecipesList = (props: RecipesListProps): JSX.Element => {\n    const dispatch = useDispatch();\n\n    const history = useHistory();\n\n    return (\n        <List>\n            {props.recipes.map((recipe, index) => {\n                return (\n                    <ListItem divider={true} key={'RecipesList' + index}>\n                        <Link to={'/recipe/' + recipe.id}>\n                            <ListItemText\n                                onClick={() => dispatch(fetchGetARecipe(recipe.id))}\n                                primary={recipe.name}\n                                id={index.toString()}\n                            />\n                        </Link>\n                        <ListItemSecondaryAction>\n                            <IconButton\n                                onClick={() => {\n                                    history.push(`/recipes/update/${recipe.id}`);\n                                    console.log(recipe);\n                                }}\n                            >\n                                <EditIcon style={{ fontSize: 15 }} color=\"primary\" />\n                            </IconButton>\n                            <IconButton\n                                edge=\"end\"\n                                onClick={() => {\n                                    dispatch(fetchDeleteRecipe(recipe.id));\n                                }}\n                            >\n                                <DeleteIcon style={{ fontSize: 15 }} color=\"primary\" />\n                            </IconButton>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            })}\n        </List>\n    );\n};\n\n// Component which contains all recipes register on the profil account connected.\n//\n// It is possible to :\n// - See the recipe by clicking on the title;\n// - Add as favorite recipe by clicking on the heart icon;\n// - Edit by clicking on the pen icon;\n// - Share into a group by clicking on the arrow icon;\n// - Delete the recipe by clicking on the trush icon.\n\nconst HomeRecipes = (): JSX.Element => {\n    const recipes = useSelector(selectRecipes);\n    const { t } = useTranslation();\n\n    const [recipesDisplay, setRecipesDisplay] = useState(recipes);\n\n    const onChange = (ids: string[]) => {\n        const newRecipes: Recipe[] = recipes.filter((recipe) => {\n            let resultat = false;\n            for (let i = 0; i < ids.length; i++) {\n                if (recipe.id.toString() === ids[i]) {\n                    resultat = true;\n                }\n            }\n            return resultat;\n        });\n        setRecipesDisplay(newRecipes);\n    };\n\n    return (\n        <Container>\n            <div className=\"recipes\" style={{ marginBottom: 20 }}>\n                <h1 style={{ marginBottom: 20 }}>{t('recipes.title')}</h1>\n                <SearchBar elements={recipes} onchange={onChange} width=\"23%\" />\n                <Box style={{ marginTop: 30 }}>\n                    <Grid container spacing={4} style={{ alignItems: 'center' }}>\n                        <Grid item xs={3}>\n                            <TagBox />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <Link to=\"/recipes/selection\">\n                                <Button color=\"primary\">{t('recipes.selectRecipes')}</Button>\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </Box>\n            </div>\n            <div className=\"RecipesList\" style={{ marginBottom: 20 }}>\n                <RecipesList recipes={recipesDisplay} />\n            </div>\n            <IconButton>\n                <Link to=\"/recipes/new_recipe\">\n                    <AddCircleOutlineOutlinedIcon style={{ fontSize: 30 }} />\n                </Link>\n            </IconButton>\n        </Container>\n    );\n};\n\nexport default HomeRecipes;\n","import { useTranslation } from 'react-i18next/';\nimport '../../i18n';\nimport { useHistory } from 'react-router-dom';\nimport React, { FC, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport Container from '@material-ui/core/Container';\nimport EditIcon from '@material-ui/icons/Edit';\nimport IconButton from '@material-ui/core/IconButton';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport { fetchGetARecipe, selectRecipe } from '../../slice/recipe/recipeSlice';\nimport { IngredientsRecipe } from '../../slice/recipe/recipeFetch';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\ntype IngredientListProps = {\n    ingredients: IngredientsRecipe[];\n};\n\nconst IngredientsTable: FC<IngredientListProps> = (props) => {\n    const { t } = useTranslation();\n    return (\n        <TableContainer component={Paper} style={{ maxWidth: 500 }}>\n            <Table aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell style={{ fontWeight: 'bold', fontSize: 20 }}>\n                            {t('ingredients.ingredients')}\n                        </TableCell>\n                        <TableCell align=\"center\" style={{ fontWeight: 'bold', fontSize: 20 }}>\n                            {t('ingredients.quantity')}\n                        </TableCell>\n                        <TableCell align=\"center\" style={{ fontWeight: 'bold', fontSize: 20 }}>\n                            {t('ingredients.unity')}\n                        </TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {props.ingredients.map((row) => (\n                        <TableRow key={row.ingredient}>\n                            <TableCell component=\"th\" scope=\"row\" style={{ fontSize: 15 }}>\n                                {row.ingredient}\n                            </TableCell>\n                            <TableCell align=\"center\" style={{ fontSize: 15 }}>\n                                {row.quantity}\n                            </TableCell>\n                            <TableCell align=\"center\" style={{ fontSize: 15 }}>\n                                {row.unity}\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n\ninterface Params {\n    id: string;\n}\n\nconst MyRecipe = (): JSX.Element => {\n    const { t } = useTranslation();\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const { id } = useParams<Params>();\n    const recipe = useSelector(selectRecipe);\n\n    useEffect(() => {\n        dispatch(fetchGetARecipe(Number(id)));\n    }, []);\n\n    return (\n        <Container>\n            <Box>\n                <Grid\n                    spacing={4}\n                    container\n                    style={{\n                        alignItems: 'center',\n                        width: '100%',\n                        position: 'fixed',\n                        zIndex: 1,\n                        top: 0,\n                        backgroundColor: 'white',\n                    }}\n                >\n                    <Grid item xs={6} className=\"title-page\">\n                        <h1>{recipe.name}</h1>\n                    </Grid>\n                    <Grid item xs={6} style={{ textAlign: 'right' }}>\n                        <IconButton\n                            onClick={() => {\n                                history.push(`/recipes/update/${id}`);\n                                console.log(recipe);\n                            }}\n                        >\n                            <EditIcon style={{ fontSize: 20 }} color=\"primary\" />\n                        </IconButton>\n                    </Grid>\n                </Grid>\n            </Box>\n            <Box className=\"image_and_time_table\" style={{ width: '100%', position: 'relative', marginTop: 60 }}>\n                <h3 style={{ marginBottom: 50 }}>{recipe.presentation}</h3>\n                <Box\n                    className=\"time_and_parts_table\"\n                    style={{\n                        textAlign: 'center',\n                        marginLeft: 'auto',\n                        marginRight: 'auto',\n                        alignItems: 'center',\n                        marginBottom: 60,\n                    }}\n                >\n                    <Box style={{ marginBottom: 50 }}>\n                        <h3>\n                            {t('recipe.for')} {recipe.number_parts} {t('recipe.peoples')}\n                        </h3>\n                    </Box>\n                    <Box>\n                        <h4>\n                            {recipe.time_preparation &&\n                                `${t('recipe.preparation-time')}: ${recipe.time_preparation} min`}\n                        </h4>\n                    </Box>\n                    <Box>\n                        <h4>{recipe.time_cooking && `${t('recipe.cooking-time')}: ${recipe.time_cooking} min`}</h4>\n                    </Box>\n                </Box>\n            </Box>\n            <Box style={{ marginLeft: 'auto', marginRight: 'auto', display: 'flex', justifyContent: 'center' }}>\n                <IngredientsTable ingredients={recipe.ingredients} />\n            </Box>\n        </Container>\n    );\n};\n\nexport default MyRecipe;\n","/* eslint-disable no-use-before-define */\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport { useTranslation } from 'react-i18next';\n\ninterface OptionType {\n    inputValue?: string;\n    name: string;\n    id?: number;\n}\n\ntype optionSelect = (option: OptionType) => void;\n\ntype AutosuggestionProps = {\n    options: OptionType[];\n    label?: string;\n    onSelect?: optionSelect;\n    onAdd?: optionSelect;\n};\n\nconst filter = createFilterOptions<OptionType>();\n\nconst Autosuggestion = (Props: AutosuggestionProps): JSX.Element => {\n    const { t } = useTranslation();\n\n    const { onSelect, onAdd, options, label } = Props;\n    const [value, setValue] = React.useState<OptionType | null>(null);\n\n    return (\n        <Autocomplete\n            value={value}\n            onChange={(event, newValue) => {\n                if (typeof newValue === 'string') {\n                    console.warn('have a string here...', newValue);\n                    setValue({\n                        name: newValue,\n                        id: -1,\n                    });\n                } else if (newValue == null) {\n                    // empty field\n                    setValue(newValue);\n                } else if (newValue.inputValue) {\n                    // new value was added\n                    const newOption = {\n                        name: newValue.inputValue,\n                    };\n                    if (onAdd) {\n                        onAdd(newOption);\n                    }\n                    setValue(newOption);\n                } else {\n                    if (onSelect) {\n                        onSelect(newValue);\n                    }\n                    setValue(newValue);\n                }\n            }}\n            filterOptions={(options, params) => {\n                const filtered = filter(options, params);\n\n                // Suggest the creation of a new value\n                if (params.inputValue !== '') {\n                    filtered.push({\n                        inputValue: params.inputValue,\n                        name: `${t('autocomplete.add')} \"${params.inputValue}\"`,\n                    });\n                }\n\n                return filtered;\n            }}\n            selectOnFocus\n            clearOnBlur\n            handleHomeEndKeys\n            options={options}\n            getOptionLabel={(option) => {\n                // Value selected with enter, right from the input\n                if (typeof option === 'string') {\n                    console.log('string: ', option);\n                    return option;\n                }\n                // Add \"xxx\" option created dynamically\n                if (option.inputValue) {\n                    console.log('option add: ', option);\n                    return option.inputValue;\n                }\n                // Regular option\n                return option.name;\n            }}\n            renderOption={(option) => option.name}\n            style={{ maxWidth: 200 }}\n            freeSolo\n            renderInput={(params) => <TextField {...params} label={label ? label : ''} variant=\"outlined\" />}\n        />\n    );\n};\n\nexport default Autosuggestion;\n","export interface Ingredient {\n    id: number;\n    name: string;\n    user_id?: number;\n}\n\n// Charge all ingredients in redux when a user is connected\nexport const getIngredients = async (idToken: string): Promise<Ingredient[]> => {\n    const myHeaders = new Headers({\n        Authorization: idToken,\n    });\n    const response = await fetch(`http://localhost:3000/api/ingredients/getAll/`, { headers: myHeaders });\n    if (response.status === 404) {\n        throw new Error('User not found');\n    }\n    const jsonResponse = await response.json();\n    return jsonResponse.ingredients;\n};\n\nexport type RequestAddIngredient = {\n    name: string;\n};\n\n// Add an ingredient into db when a user is creating a recipe\nexport const addIngredient = async (idToken: string, request: RequestAddIngredient): Promise<Ingredient> => {\n    const myHeaders = new Headers({\n        Authorization: idToken,\n        'content-type': 'application/json',\n    });\n    const response = await fetch(`http://localhost:3000/api/ingredients/add/`, {\n        method: 'POST',\n        body: JSON.stringify(request),\n        headers: myHeaders,\n    });\n    if (response.status < 200 || response.status >= 300) {\n        const err = await response.text();\n        throw new Error('Ingredient not added: ' + err);\n    }\n    const ingredient = await response.json();\n    return ingredient.ingredient;\n};\n\nexport const deleteIngredient = async (idToken: string, ingredientId: number): Promise<void> => {\n    const myHeaders = new Headers({\n        Authorization: idToken,\n        'content-type': 'application/json',\n    });\n    const response = await fetch(`http://localhost:3000/api/ingredients/delete/${ingredientId}`, {\n        headers: myHeaders,\n        method: 'DELETE',\n    });\n    if (response.status < 200 || response.status >= 300) {\n        const err = await response.text();\n        throw new Error('Ingredient not deleted: ' + err);\n    }\n};\n\nexport type RequestGetIngredientsByRecipes = {\n    recipe_id: number;\n    number_parts: number;\n};\n\nexport type ResponseGetIngredientsByRecipes = {\n    ingredient: string;\n    ingredient_id: number;\n    unity: string;\n    unity_id: number;\n    quantity: number;\n    recipe_id: number;\n    recipe_number_parts: number;\n};\n\n// Fetch to get a recipe by recipeId\nexport const fetchGetIngredientsByRecipes = async (\n    idToken: string,\n    request: RequestGetIngredientsByRecipes[],\n): Promise<ResponseGetIngredientsByRecipes[]> => {\n    const myHeaders = new Headers({\n        Authorization: idToken,\n        'content-type': 'application/json',\n    });\n    const response = await fetch(`http://localhost:3000/api/ingredients/getByRecipes`, {\n        method: 'POST',\n        body: JSON.stringify(request),\n        headers: myHeaders,\n    });\n    if (response.status === 404) {\n        throw new Error('Recipe not found');\n    }\n    const jsonResponse = await response.json();\n    return jsonResponse.ingredientsList;\n};\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport { Ingredient, RequestAddIngredient, getIngredients, addIngredient, deleteIngredient } from './ingredientsFetch';\n\nexport const fetchGetIngredients = createAsyncThunk('/api/ingredients/getAll', async (idToken: string) => {\n    const ingredients = await getIngredients(idToken);\n    return ingredients;\n});\n\nexport const fetchAddIngredient = createAsyncThunk(\n    '/api/ingredients/add',\n    async (req: RequestAddIngredient, thunkAPI) => {\n        const state = thunkAPI.getState() as RootState;\n        const ingredient = await addIngredient(state.user.idToken, req);\n        return ingredient;\n    },\n);\n\nexport const fetchDeleteIngredient = createAsyncThunk(\n    '/api/ingredients/delete',\n    async (ingredientId: number, thunkAPI) => {\n        const state = thunkAPI.getState() as RootState;\n        await deleteIngredient(state.user.idToken, ingredientId);\n        return ingredientId;\n    },\n);\n\ntype IngredientsList = {\n    ingredients: Ingredient[];\n};\n\nconst initialState: IngredientsList = {\n    ingredients: [],\n};\n\nconst ingredientsReducer = createSlice({\n    name: 'ingredients',\n    initialState: initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        // fetchGetIngredients\n        builder.addCase(fetchGetIngredients.fulfilled, (state, action) => {\n            state.ingredients = action.payload;\n        });\n        builder.addCase(fetchGetIngredients.rejected, (state) => {\n            state.ingredients = [];\n        });\n        // fetchAddIngredient\n        builder.addCase(fetchAddIngredient.fulfilled, (state, action) => {\n            state.ingredients.push(action.payload);\n        });\n        // fetchDeleteIngredient\n        builder.addCase(fetchDeleteIngredient.fulfilled, (state, action) => {\n            state.ingredients = state.ingredients.filter((ingredient) => ingredient.id !== action.payload);\n        });\n    },\n});\n\nexport const ingredients = (state: RootState): Ingredient[] => state.ingredients.ingredients;\nexport const selectIngredient = (state: RootState, index: number): Ingredient => state.ingredients.ingredients[index];\n\nexport default ingredientsReducer.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\nexport interface Group {\n    id: number;\n    name: string;\n}\n\ntype GroupsList = {\n    groups: Group[];\n};\n\nconst initialState: GroupsList = {\n    groups: [\n        { name: 'Famille Verhille', id: 0 },\n        { name: 'Beeboo', id: 1 },\n        { name: 'Baguera Pot', id: 2 },\n    ],\n};\n\nconst groupReducer = createSlice({\n    name: 'groups',\n    initialState: initialState,\n    reducers: {},\n});\n\nexport const selectGroups = (state: RootState): Group[] => state.groups.groups;\n\nexport default groupReducer.reducer;\n","export interface Unity {\n    id: number;\n    name: string;\n    downscaling?: string;\n    downscaling_factor?: number;\n    upscaling?: string;\n    upscaling_factor?: number;\n    user_id: number;\n}\n\n// Charge all unities in redux when a user is connected\nexport const getUnities = async (idToken: string): Promise<Unity[]> => {\n    const myHeaders = new Headers({\n        Authorization: idToken,\n    });\n    const response = await fetch(`http://localhost:3000/api/unities/getAll/`, { headers: myHeaders });\n    if (response.status === 404) {\n        throw new Error('User not found');\n    }\n    const jsonResponse = await response.json();\n    return jsonResponse.unities;\n};\n\nexport type RequestAddUnity = {\n    name: string;\n};\n\nexport const addUnity = async (idToken: string, request: RequestAddUnity): Promise<Unity> => {\n    const myHeaders = new Headers({\n        Authorization: idToken,\n        'content-type': 'application/json',\n    });\n    const response = await fetch(`http://localhost:3000/api/unities/add/`, {\n        headers: myHeaders,\n        method: 'POST',\n        body: JSON.stringify(request),\n    });\n    if (response.status < 200 || response.status >= 300) {\n        const err = await response.text();\n        throw new Error('Unity not added: ' + err);\n    }\n    const jsonResponse = await response.json();\n    return jsonResponse.unity;\n};\n\nexport type RequestDeleteUnity = {\n    id: number;\n};\n\nexport const deleteUnity = async (idToken: string, unityId: number): Promise<void> => {\n    const myHeaders = new Headers({\n        Authorization: idToken,\n        'content-type': 'application/json',\n    });\n    const response = await fetch(`http://localhost:3000/api/unities/delete/${unityId}`, {\n        headers: myHeaders,\n        method: 'DELETE',\n    });\n    if (response.status < 200 || response.status >= 300) {\n        const err = await response.text();\n        throw new Error('Unity not added: ' + err);\n    }\n};\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport { Unity, getUnities, addUnity, deleteUnity, RequestAddUnity } from './unityFetch';\n\n// Get all unities from initial state and by user\nexport const fetchGetUnities = createAsyncThunk('/api/unities/getAll', async (idToken: string) => {\n    const unities = await getUnities(idToken);\n    return unities;\n});\n\nexport const fetchAddUnity = createAsyncThunk('/api/unities/add', async (request: RequestAddUnity, thunkAPI) => {\n    const state = thunkAPI.getState() as RootState;\n    const unity = await addUnity(state.user.idToken, request);\n    return unity;\n});\n\nexport const fetchDeleteUnity = createAsyncThunk('/api/unities/delete', async (unityId: number, thunkAPI) => {\n    const state = thunkAPI.getState() as RootState;\n    await deleteUnity(state.user.idToken, unityId);\n    return unityId;\n});\n\ntype UnitiesList = {\n    unities: Unity[];\n};\n\nconst initialState: UnitiesList = {\n    unities: [],\n};\n\nconst unitiesReducer = createSlice({\n    name: 'unities',\n    initialState: initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        // fetchGetUnities\n        builder.addCase(fetchGetUnities.fulfilled, (state, action) => {\n            state.unities = action.payload;\n        });\n        builder.addCase(fetchGetUnities.rejected, (state) => {\n            state.unities = [];\n        });\n        // fetchAddUnity\n        builder.addCase(fetchAddUnity.fulfilled, (state, action) => {\n            state.unities.push(action.payload);\n        });\n        // fetchDeleteUnity\n        builder.addCase(fetchDeleteUnity.fulfilled, (state, action) => {\n            state.unities = state.unities.filter((unity) => unity.id !== action.payload);\n        });\n    },\n});\n\nexport const unities = (state: RootState): Unity[] => state.unities.unities;\nexport default unitiesReducer.reducer;\n","export interface IngredientsGroceryList {\n    ingredient_id?: number;\n    ingredient: string;\n    unity_id?: number;\n    unity: string;\n    quantity?: number;\n}\n\nexport interface GroceryList {\n    id: number;\n    user_id: number;\n}\n\nexport interface RequestAddGroceryList {\n    ingredients?: IngredientsGroceryList[];\n}\n\n// Fetch to addRecipe into user db\nexport const addGroceryList = async (idToken: string, req: RequestAddGroceryList): Promise<GroceryList> => {\n    const myHeaders = new Headers({\n        Authorization: idToken,\n        'content-type': 'application/json',\n    });\n    const response = await fetch(`http://localhost:3000/api/groceriesLists/add/`, {\n        method: 'POST',\n        body: JSON.stringify(req),\n        headers: myHeaders,\n    });\n    if (response.status < 200 || response.status >= 300) {\n        const err = await response.text();\n        throw new Error('GroceryList not added: ' + err);\n    }\n    const jsonResponse = await response.json();\n    return jsonResponse.groceryList;\n};\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport { addGroceryList, GroceryList, RequestAddGroceryList } from './groceriesListsFetch';\n\nexport const fetchAddGroceryList = createAsyncThunk(\n    '/api/groceriesLists/add',\n    async (ingredientsList: RequestAddGroceryList, thunkAPI) => {\n        const state = thunkAPI.getState() as RootState;\n        const groceryList = await addGroceryList(state.user.idToken, ingredientsList);\n        console.log(groceryList);\n        return groceryList;\n    },\n);\n\ntype Grocery = {\n    groceriesLists: GroceryList[];\n};\n\nconst initialState: Grocery = {\n    groceriesLists: [],\n};\n\nconst groceriesListsReducer = createSlice({\n    name: 'groceriesLists',\n    initialState: initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        // fetchGetRecipes\n        builder.addCase(fetchAddGroceryList.fulfilled, (state, action) => {\n            state.groceriesLists.push(action.payload);\n        });\n    },\n});\n\nexport const groceryList = (state: RootState): GroceryList[] => state.groceriesLists.groceriesLists;\n\nexport default groceriesListsReducer.reducer;\n","export interface IngredientsGroceryList {\n    ingredient_id?: number;\n    ingredient: string;\n    unity_id?: number;\n    unity: string;\n    quantity?: number;\n}\n\nexport interface GroceryListInformation {\n    id?: number;\n    ingredients: IngredientsGroceryList[];\n}\n\n// Fetch to get a recipe by recipeId\nexport const getGroceryList = async (idToken: string, groceryListId: number): Promise<GroceryListInformation> => {\n    const myHeaders = new Headers({\n        Authorization: idToken,\n    });\n    const response = await fetch(`http://localhost:3000/api/groceriesLists/${groceryListId}`, {\n        headers: myHeaders,\n    });\n    if (response.status === 404) {\n        throw new Error('GroceryList not found');\n    }\n    const jsonResponse = await response.json();\n    return jsonResponse.groceryList;\n};\n\n// Fetch to get a recipe by recipeId\nexport const getLatestGroceryList = async (idToken: string): Promise<GroceryListInformation> => {\n    const myHeaders = new Headers({\n        Authorization: idToken,\n    });\n    const response = await fetch(`http://localhost:3000/api/groceriesLists/`, {\n        headers: myHeaders,\n    });\n    if (response.status === 404) {\n        throw new Error('GroceryList not found');\n    }\n    const jsonResponse = await response.json();\n    return jsonResponse.groceryList;\n};\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport { getGroceryList, GroceryListInformation, getLatestGroceryList } from './groceryListFetch';\n\nexport const fetchGetAGroceryList = createAsyncThunk(\n    `/api/groceriesLists/:id`,\n    async (groceryListId: number, thunkAPI) => {\n        const state = thunkAPI.getState() as RootState;\n        const groceryList = await getGroceryList(state.user.idToken, groceryListId);\n        return groceryList;\n    },\n);\n\nexport const fetchGetLatestGroceryList = createAsyncThunk(`/api/groceriesLists/`, async (idToken: string) => {\n    const groceryList = await getLatestGroceryList(idToken);\n    return groceryList;\n});\n\ntype GroceryList = {\n    groceryList: GroceryListInformation;\n};\n\nconst initialState: GroceryList = {\n    groceryList: {\n        ingredients: [],\n    },\n};\n\nconst groceryListReducer = createSlice({\n    name: 'groceryList',\n    initialState: initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        // fetchGetGroceryList\n        builder.addCase(fetchGetAGroceryList.fulfilled, (state, action) => {\n            state.groceryList = action.payload;\n        });\n        // fetchGetLatestGroceryList\n        builder.addCase(fetchGetLatestGroceryList.fulfilled, (state, action) => {\n            state.groceryList = action.payload;\n        });\n    },\n});\n\nexport const selectGroceryList = (state: RootState): GroceryListInformation => state.groceryList.groceryList;\n\nexport default groceryListReducer.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\nimport recipesReducer from '../slice/recipes/recipesSlice';\nimport ingredientsReducer from '../slice/ingredients/ingredientsSlice';\nimport userReducer from '../slice/user/userSlice';\nimport groupsReducer from '../slice/groups/groupsSlice';\nimport unitiesReducer from '../slice/unity/unitySlice';\nimport recipeReducer from '../slice/recipe/recipeSlice';\nimport groceriesListsReducer from '../slice/groceriesLists/groceriesListsSlice';\nimport groceryListReducer from '../slice/groceryList/groceryListSlice';\n\nconst store = configureStore({\n    reducer: {\n        recipes: recipesReducer,\n        recipe: recipeReducer,\n        ingredients: ingredientsReducer,\n        unities: unitiesReducer,\n        user: userReducer,\n        groups: groupsReducer,\n        groceriesLists: groceriesListsReducer,\n        groceryList: groceryListReducer,\n    },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport type AppDispatch = typeof store.dispatch;\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n\nexport default store;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { unwrapResult } from '@reduxjs/toolkit';\nimport Container from '@material-ui/core/Container';\nimport { useTranslation } from 'react-i18next';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport TagsBox from '../../components/Tags';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport { ListItem, ListItemText, ListItemSecondaryAction } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport List from '@material-ui/core/List';\nimport LibraryAddIcon from '@material-ui/icons/LibraryAdd';\nimport Autosuggestion from '../../components/Autocomplete';\nimport { useSelector } from 'react-redux';\nimport { useAppDispatch } from '../../app/store';\nimport { ingredients, fetchAddIngredient } from '../../slice/ingredients/ingredientsSlice';\nimport { unities, fetchAddUnity } from '../../slice/unity/unitySlice';\nimport { fetchAddRecipe } from '../../slice/recipes/recipesSlice';\n\ntype onRemove = (ingredient: IngredientRecipe, index: number) => void;\n\ntype IngredientsListProps = {\n    ingredientsList: IngredientRecipe[];\n    onRemoveIngredient: onRemove;\n};\n\nconst IngredientsList = (props: IngredientsListProps): JSX.Element => {\n    return (\n        <List>\n            {props.ingredientsList.map((ingredient, index) => {\n                return (\n                    <ListItem divider={true} key={index}>\n                        <ListItemText primary={ingredient.name} id={index.toString()} />\n                        <ListItemText primary={ingredient.quantity} id={index.toString()} />\n                        <ListItemText primary={ingredient.unity} id={index.toString()} />\n                        <ListItemSecondaryAction>\n                            <IconButton\n                                edge=\"end\"\n                                onClick={() => {\n                                    if (props.onRemoveIngredient) {\n                                        props.onRemoveIngredient(ingredient, index);\n                                    }\n                                }}\n                            >\n                                <DeleteIcon style={{ fontSize: 15 }} color=\"primary\" />\n                            </IconButton>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            })}\n        </List>\n    );\n};\n\ninterface IngredientRecipe {\n    ingredient_id?: number;\n    name: string;\n    unity_id?: number;\n    unity: string;\n    quantity?: number;\n}\n\ninterface RequestAddRecipe {\n    name: string;\n    presentation?: string;\n    number_parts: number;\n    time_preparation?: string;\n    time_cooking?: string;\n    recipe_photo_id?: number;\n    recipe_description_id?: number;\n    ingredients?: IngredientRecipe[];\n}\n\nconst NewRecipe = (): JSX.Element => {\n    const { t } = useTranslation();\n\n    const dispatch = useAppDispatch();\n    const history = useHistory();\n\n    const allIngredients = useSelector(ingredients);\n    const allUnities = useSelector(unities);\n\n    const [newRecipe, setRecipe] = useState<RequestAddRecipe>({\n        name: '',\n        presentation: '',\n        time_preparation: '',\n        time_cooking: '',\n        number_parts: 2,\n        ingredients: [],\n    });\n\n    const [ingredientsRow, setIngredientRow] = useState<IngredientRecipe[]>([]);\n\n    const [ingredientRecipe, setIngredientRecipe] = useState<IngredientRecipe>({\n        name: '',\n        ingredient_id: undefined,\n        unity: '',\n        unity_id: undefined,\n        quantity: undefined,\n    });\n\n    const removeIngredientList = (elt: IngredientRecipe, index: number) => {\n        if (ingredientsRow[index]) {\n            const newingredientRow = ingredientsRow.filter((_, i) => i !== index);\n            setIngredientRow(newingredientRow);\n        }\n    };\n\n    return (\n        <Container>\n            <form>\n                <h1>{t('new_recipe.title-page')}</h1>\n                <Box className=\"title\">\n                    <p>{t('new_recipe.title')}</p>\n                    <TextField\n                        placeholder={t('new_recipe.add-title')}\n                        onChange={(event) => {\n                            setRecipe({ ...newRecipe, name: event.currentTarget.value });\n                        }}\n                    />\n                </Box>\n                <Box>\n                    <p>{t('new_recipe.presentation')}</p>\n                    <TextField\n                        fullWidth\n                        placeholder={t('new_recipe.add-presentation')}\n                        onChange={(event) => {\n                            setRecipe({ ...newRecipe, presentation: event.currentTarget.value });\n                        }}\n                    />\n                </Box>\n                <Box>\n                    <TagsBox />\n                </Box>\n                <Box>\n                    <p>{t('new_recipe.parts')}</p>\n                    <TextField\n                        placeholder={t('new_recipe.parts_add')}\n                        onChange={(event) => {\n                            setRecipe({ ...newRecipe, number_parts: Number(event.currentTarget.value) });\n                        }}\n                    />\n                </Box>\n                <Grid container spacing={4}>\n                    <Grid item xs={3} className=\"preparation-time\" style={{ display: 'block' }}>\n                        <p>{t('new_recipe.preparation-time')}</p>\n                        <Box style={{ display: 'flex' }}>\n                            <TextField\n                                fullWidth\n                                placeholder={t('new_recipe.add-time')}\n                                margin=\"normal\"\n                                onChange={(event) => {\n                                    setRecipe({ ...newRecipe, time_preparation: event.currentTarget.value });\n                                }}\n                            />\n                            <p>{t('new_recipe.minute')}</p>\n                        </Box>\n                    </Grid>\n                    <Grid item xs={3} className=\"cooking-time\" style={{ display: 'block' }}>\n                        <p>{t('new_recipe.cooking-time')}</p>\n                        <Box style={{ display: 'flex' }}>\n                            <TextField\n                                fullWidth\n                                placeholder={t('new_recipe.add-time')}\n                                margin=\"normal\"\n                                onChange={(event) => {\n                                    setRecipe({ ...newRecipe, time_cooking: event.currentTarget.value });\n                                }}\n                            />\n                            <p>{t('new_recipe.minute')}</p>\n                        </Box>\n                    </Grid>\n                </Grid>\n                <Box style={{ marginBottom: 70 }}>\n                    <p>{t('new_recipe.ingredients')}</p>\n                    <Grid container spacing={4} style={{ marginBottom: 20, alignItems: 'center' }}>\n                        <Grid item xs={3}>\n                            <Autosuggestion\n                                label={t('new_recipe.add-ingredient')}\n                                onSelect={(option) => {\n                                    setIngredientRecipe({\n                                        ...ingredientRecipe,\n                                        ingredient_id: option.id,\n                                        name: option.name,\n                                    });\n                                }}\n                                onAdd={async (option) => {\n                                    const ingredient = await dispatch(fetchAddIngredient(option));\n                                    const result = unwrapResult(ingredient);\n                                    setIngredientRecipe({\n                                        ...ingredientRecipe,\n                                        ingredient_id: result.id,\n                                        name: result.name,\n                                    });\n                                }}\n                                options={allIngredients}\n                            />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <TextField\n                                style={{ maxWidth: 200 }}\n                                label={t('new_recipe.add-quantity')}\n                                variant=\"outlined\"\n                                onChange={(event) =>\n                                    setIngredientRecipe({\n                                        ...ingredientRecipe,\n                                        quantity: Number(event.currentTarget.value),\n                                    })\n                                }\n                            />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <Autosuggestion\n                                label={t('new_recipe.add-unity')}\n                                onSelect={(option) => {\n                                    setIngredientRecipe({\n                                        ...ingredientRecipe,\n                                        unity_id: option.id,\n                                        unity: option.name,\n                                    });\n                                }}\n                                onAdd={async (option) => {\n                                    const unity = await dispatch(fetchAddUnity(option));\n                                    const result = unwrapResult(unity);\n                                    setIngredientRecipe({\n                                        ...ingredientRecipe,\n                                        unity_id: result.id,\n                                        unity: result.name,\n                                    });\n                                }}\n                                options={allUnities}\n                            />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <Button\n                                onClick={() => {\n                                    const newIngredientRow = ingredientsRow.concat(ingredientRecipe);\n                                    setIngredientRow(newIngredientRow);\n                                    setRecipe({ ...newRecipe, ingredients: newIngredientRow });\n                                    setIngredientRecipe({\n                                        ...ingredientRecipe,\n                                    });\n                                }}\n                            >\n                                {t('new_recipe.add')}\n                            </Button>\n                        </Grid>\n                    </Grid>\n                    <IngredientsList ingredientsList={ingredientsRow} onRemoveIngredient={removeIngredientList} />\n                    <Box style={{ width: '100%' }}>\n                        <IconButton\n                            onClick={async () => {\n                                try {\n                                    const action = await dispatch(fetchAddRecipe(newRecipe));\n                                    const result = unwrapResult(action);\n                                    console.log('result: ', result);\n                                    history.push(`/recipe/${result.id}`);\n                                } catch (e) {\n                                    return console.error(e);\n                                }\n                            }}\n                        >\n                            <LibraryAddIcon style={{ fontSize: 25, marginLeft: 'auto', marginRight: 'auto' }} />\n                        </IconButton>\n                    </Box>\n                </Box>\n            </form>\n        </Container>\n    );\n};\n\nexport default NewRecipe;\n","import React, { useState, useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { unwrapResult } from '@reduxjs/toolkit';\nimport Container from '@material-ui/core/Container';\nimport { useTranslation } from 'react-i18next';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport { ListItem, ListItemText, ListItemSecondaryAction } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport List from '@material-ui/core/List';\nimport LibraryAddIcon from '@material-ui/icons/LibraryAdd';\nimport Autosuggestion from '../../components/Autocomplete';\nimport { useSelector } from 'react-redux';\nimport { useAppDispatch } from '../../app/store';\nimport { ingredients, fetchAddIngredient } from '../../slice/ingredients/ingredientsSlice';\nimport { unities, fetchAddUnity } from '../../slice/unity/unitySlice';\nimport { fetchUpdateRecipe, fetchGetARecipe, selectRecipe } from '../../slice/recipe/recipeSlice';\nimport { RecipeInformation, IngredientsRecipe } from '../../slice/recipe/recipeFetch';\n\ntype onRemove = (ingredient: IngredientsRecipe, index: number) => void;\n\ntype IngredientsListProps = {\n    ingredientsList: IngredientsRecipe[];\n    onRemoveIngredient: onRemove;\n};\n\nconst IngredientsList = (props: IngredientsListProps): JSX.Element => {\n    return (\n        <List>\n            {props.ingredientsList.map((ingredient, index) => {\n                return (\n                    <ListItem divider={true} key={index}>\n                        <ListItemText primary={ingredient.ingredient} id={index.toString()} />\n                        <ListItemText primary={ingredient.quantity} id={index.toString()} />\n                        <ListItemText primary={ingredient.unity} id={index.toString()} />\n                        <ListItemSecondaryAction>\n                            <IconButton\n                                edge=\"end\"\n                                onClick={() => {\n                                    if (props.onRemoveIngredient) {\n                                        props.onRemoveIngredient(ingredient, index);\n                                    }\n                                }}\n                            >\n                                <DeleteIcon style={{ fontSize: 15 }} color=\"primary\" />\n                            </IconButton>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            })}\n        </List>\n    );\n};\n\ninterface Params {\n    id: string;\n}\n\nconst UpdateRecipe = (): JSX.Element => {\n    const { t } = useTranslation();\n\n    const { id } = useParams<Params>();\n\n    const dispatch = useAppDispatch();\n    const history = useHistory();\n\n    const recipe = useSelector(selectRecipe);\n    const allIngredients = useSelector(ingredients);\n    const allUnities = useSelector(unities);\n\n    console.log(recipe);\n    const [updateRecipe, setUpdateRecipe] = useState<RecipeInformation>(recipe);\n\n    const [ingredientRecipe, setIngredientRecipe] = useState<IngredientsRecipe>({\n        ingredient: '',\n        ingredient_id: undefined,\n        unity: '',\n        unity_id: undefined,\n        quantity: undefined,\n    });\n\n    const removeIngredientList = (elt: IngredientsRecipe, index: number) => {\n        if (updateRecipe.ingredients[index]) {\n            const newingredientRow = updateRecipe.ingredients.filter((_, i) => i !== index);\n            setUpdateRecipe({ ...updateRecipe, ingredients: newingredientRow });\n        }\n    };\n\n    useEffect(() => {\n        dispatch(fetchGetARecipe(Number(id)));\n    }, []);\n\n    useEffect(() => {\n        setUpdateRecipe(recipe);\n    }, [recipe]);\n\n    return (\n        <Container>\n            <form>\n                <h1>{t('update_recipe.title-page')}</h1>\n                <Box className=\"title\">\n                    <p>{t('new_recipe.title')}</p>\n                    <TextField\n                        value={updateRecipe.name}\n                        placeholder={t('new_recipe.add-title')}\n                        onChange={(event) => {\n                            setUpdateRecipe({ ...updateRecipe, name: event.currentTarget.value });\n                        }}\n                    />\n                </Box>\n                <Box>\n                    <p>{t('new_recipe.presentation')}</p>\n                    <TextField\n                        fullWidth\n                        value={updateRecipe.presentation}\n                        placeholder={t('new_recipe.add-presentation')}\n                        onChange={(event) => {\n                            setUpdateRecipe({ ...updateRecipe, presentation: event.currentTarget.value });\n                        }}\n                    />\n                </Box>\n                <Box>\n                    <p>{t('new_recipe.parts')}</p>\n                    <TextField\n                        value={updateRecipe.number_parts}\n                        placeholder={t('new_recipe.parts_add')}\n                        onChange={(event) => {\n                            setUpdateRecipe({ ...updateRecipe, number_parts: Number(event.currentTarget.value) });\n                        }}\n                    />\n                </Box>\n                <Grid container spacing={9}>\n                    <Grid item xs={5} className=\"preparation-time\" style={{ display: 'block' }}>\n                        <p>{t('new_recipe.preparation-time')}</p>\n                        <Box style={{ display: 'flex' }}>\n                            <TextField\n                                value={updateRecipe.time_preparation}\n                                fullWidth\n                                placeholder={t('new_recipe.add-time')}\n                                margin=\"normal\"\n                                onChange={(event) => {\n                                    setUpdateRecipe({ ...updateRecipe, time_preparation: event.currentTarget.value });\n                                }}\n                            />\n                            <p>{t('new_recipe.minute')}</p>\n                        </Box>\n                    </Grid>\n                    <Grid item xs={5} className=\"cooking-time\" style={{ display: 'block' }}>\n                        <p>{t('new_recipe.cooking-time')}</p>\n                        <Box style={{ display: 'flex' }}>\n                            <TextField\n                                value={updateRecipe.time_cooking}\n                                fullWidth\n                                placeholder={t('new_recipe.add-time')}\n                                margin=\"normal\"\n                                onChange={(event) => {\n                                    setUpdateRecipe({ ...updateRecipe, time_cooking: event.currentTarget.value });\n                                }}\n                            />\n                            <p>{t('new_recipe.minute')}</p>\n                        </Box>\n                    </Grid>\n                </Grid>\n                <Box style={{ marginBottom: 70 }}>\n                    <p>{t('new_recipe.ingredients')}</p>\n                    <Grid container spacing={4} style={{ marginBottom: 20, alignItems: 'center' }}>\n                        <Grid item xs={3}>\n                            <Autosuggestion\n                                label=\"add ingredient\"\n                                onSelect={(option) => {\n                                    setIngredientRecipe({\n                                        ...ingredientRecipe,\n                                        ingredient_id: option.id,\n                                        ingredient: option.name,\n                                    });\n                                }}\n                                onAdd={(option) => dispatch(fetchAddIngredient(option))}\n                                options={allIngredients}\n                            />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <Autosuggestion\n                                label=\"add unit\"\n                                onSelect={(option) => {\n                                    setIngredientRecipe({\n                                        ...ingredientRecipe,\n                                        unity_id: option.id,\n                                        unity: option.name,\n                                    });\n                                }}\n                                onAdd={(option) => dispatch(fetchAddUnity(option))}\n                                options={allUnities}\n                            />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <TextField\n                                placeholder=\"Quantity\"\n                                variant=\"outlined\"\n                                onChange={(event) =>\n                                    setIngredientRecipe({\n                                        ...ingredientRecipe,\n                                        quantity: Number(event.currentTarget.value),\n                                    })\n                                }\n                            />\n                        </Grid>\n                        <Grid item xs={3}>\n                            <Button\n                                onClick={() => {\n                                    if (updateRecipe.ingredients) {\n                                        const newIngredientRow = updateRecipe.ingredients.concat(ingredientRecipe);\n                                        setUpdateRecipe({ ...updateRecipe, ingredients: newIngredientRow });\n                                        setIngredientRecipe({\n                                            ...ingredientRecipe,\n                                            ingredient: '',\n                                            ingredient_id: undefined,\n                                            unity: '',\n                                            unity_id: undefined,\n                                            quantity: undefined,\n                                        });\n                                    }\n                                }}\n                            >\n                                {t('new_recipe.add')}\n                            </Button>\n                        </Grid>\n                    </Grid>\n                    <IngredientsList\n                        ingredientsList={updateRecipe.ingredients}\n                        onRemoveIngredient={removeIngredientList}\n                    />\n                    <Box style={{ width: '100%' }}>\n                        <IconButton\n                            onClick={() =>\n                                dispatch(\n                                    fetchUpdateRecipe({\n                                        recipe: updateRecipe,\n                                    }),\n                                )\n                                    .then(unwrapResult)\n                                    .then((result) => {\n                                        console.log('result: ', result);\n                                        history.push(`/recipe/${result.id}`);\n                                    })\n                                    .catch((e) => console.error(e))\n                            }\n                        >\n                            <LibraryAddIcon style={{ fontSize: 25, marginLeft: 'auto', marginRight: 'auto' }} />\n                        </IconButton>\n                    </Box>\n                </Box>\n            </form>\n        </Container>\n    );\n};\n\nexport default UpdateRecipe;\n","import '../../i18n';\nimport { Link } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport React from 'react';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport HomeIcon from '@material-ui/icons/Home';\nimport ListIcon from '@material-ui/icons/List';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchGetAGroceryList, selectGroceryList } from '../../slice/groceryList/groceryListSlice';\n\ntype ToolbarProps = {\n    style?: React.CSSProperties;\n};\n\nconst ToolsBar = (props: ToolbarProps): JSX.Element => {\n    const { t } = useTranslation();\n    const [button, setButton] = React.useState(0);\n\n    const dispatch = useDispatch();\n    const groceryList = useSelector(selectGroceryList);\n\n    return (\n        <BottomNavigation\n            value={button}\n            onChange={(event, newValue) => {\n                setButton(newValue);\n            }}\n            showLabels\n            style={props.style}\n        >\n            <BottomNavigationAction\n                icon={<HomeIcon />}\n                label={t('toolsbar.recipes')}\n                to={'/recipes'}\n                component={Link}\n            />\n            <BottomNavigationAction\n                icon={<ListIcon />}\n                label={t('toolsbar.groceryList')}\n                to={`/groceryList/${groceryList.id}`}\n                onClick={() => {\n                    if (groceryList.id) {\n                        dispatch(fetchGetAGroceryList(groceryList.id));\n                    }\n                }}\n                component={Link}\n            />\n            <BottomNavigationAction\n                icon={<AccountCircleIcon />}\n                label={t('toolsbar.profile')}\n                to={'/profile'}\n                component={Link}\n            />\n        </BottomNavigation>\n    );\n};\n\nexport default ToolsBar;\n","import React, { FC, useEffect } from 'react';\nimport Container from '@material-ui/core/Container';\nimport { useTranslation } from 'react-i18next';\nimport List from '@material-ui/core/List';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItem from '@material-ui/core/ListItem';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { fetchGetAGroceryList, selectGroceryList } from '../../slice/groceryList/groceryListSlice';\nimport { IngredientsGroceryList } from '../../slice/groceriesLists/groceriesListsFetch';\n\ntype IngredientListProps = {\n    ingredients: IngredientsGroceryList[];\n};\n\nconst CheckIngredientsList: FC<IngredientListProps> = (props) => {\n    return (\n        <List>\n            {props.ingredients.map((ingredient, index) => {\n                return (\n                    <ListItem divider={true} key={'CheckIngredientsList' + index}>\n                        <ListItemIcon>\n                            <Checkbox edge=\"start\" checked={false} tabIndex={-1} disableRipple />\n                        </ListItemIcon>\n                        <ListItemText\n                            primary={ingredient.ingredient}\n                            secondary={ingredient.quantity + ' ' + ingredient.unity}\n                            id={index.toString()}\n                        />\n                    </ListItem>\n                );\n            })}\n        </List>\n    );\n};\n\ninterface Params {\n    id: string;\n}\n\nconst GroceryList = (): JSX.Element => {\n    const { t } = useTranslation();\n\n    const dispatch = useDispatch();\n\n    const { id } = useParams<Params>();\n    const groceryList = useSelector(selectGroceryList);\n\n    useEffect(() => {\n        dispatch(fetchGetAGroceryList(Number(id)));\n    }, []);\n\n    return (\n        <Container>\n            <h1>{t('groceryList.title-page')}</h1>\n            <CheckIngredientsList ingredients={groceryList.ingredients} />\n        </Container>\n    );\n};\n\nexport default GroceryList;\n","import React from 'react';\nimport List from '@material-ui/core/List';\nimport { IconButton, ListItem, ListItemText, ListItemSecondaryAction } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\ntype onRemove = (elt: Element) => void;\n\ntype ListProps = {\n    listElements: Element[];\n    onRemoveElement?: onRemove;\n};\n\nexport interface Element {\n    name: string;\n    id: number;\n}\n\nconst ListComponent = (props: ListProps): JSX.Element => {\n    return (\n        <List>\n            {props.listElements.map((eltList, index) => {\n                return (\n                    <ListItem divider={true} key={index}>\n                        <ListItemText primary={eltList.name} id={index.toString()} />\n                        <ListItemSecondaryAction>\n                            <IconButton\n                                edge=\"end\"\n                                onClick={() => {\n                                    if (props.onRemoveElement) {\n                                        props.onRemoveElement(eltList);\n                                    }\n                                }}\n                            >\n                                <DeleteIcon style={{ fontSize: 15 }} color=\"primary\" />\n                            </IconButton>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            })}\n        </List>\n    );\n};\n\nexport default ListComponent;\n","import React, { useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport { useTranslation } from 'react-i18next';\nimport { Button, IconButton, TextField } from '@material-ui/core';\nimport AddCircleOutlineOutlinedIcon from '@material-ui/icons/AddCircleOutlineOutlined';\nimport Grid from '@material-ui/core/Grid';\nimport { Dialog, DialogTitle, DialogContent, DialogActions } from '@material-ui/core';\nimport SearchBar from '../../components/SearchBar';\nimport ListComponent, { Element } from '../../components/List';\nimport { Ingredient } from '../../slice/ingredients/ingredientsFetch';\nimport { ingredients, fetchDeleteIngredient } from '../../slice/ingredients/ingredientsSlice';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst MyIngredients = (): JSX.Element => {\n    const ingredientsList = useSelector(ingredients);\n    const { t } = useTranslation();\n\n    const dispatch = useDispatch();\n\n    const [modalOpen, setModalOpen] = useState(false);\n\n    const selectIngredientsCustom = (ingredientsElements: Ingredient[]): Ingredient[] =>\n        ingredientsElements.filter((ingredient) => {\n            return ingredient.user_id !== null;\n        });\n\n    const deleteIngredient = (ingredient: Element) => {\n        dispatch(fetchDeleteIngredient(ingredient.id));\n    };\n\n    const [ingredientsDisplay, setIngredientsDisplay] = useState(ingredientsList);\n\n    const onChange = (ids: string[]) => {\n        const newIngredients: Ingredient[] = ingredientsList.filter((ingredient) => {\n            let resultat = false;\n            for (let i = 0; i < ids.length; i++) {\n                if (!ingredient.id) {\n                    // @DEBUG: remove this\n                    console.warn('ingredient with id undefined', ingredient);\n                    continue;\n                }\n                if (ingredient.id.toString() === ids[i]) {\n                    resultat = true;\n                }\n            }\n            return resultat;\n        });\n        setIngredientsDisplay(newIngredients);\n    };\n\n    return (\n        <Container>\n            <Grid container style={{ alignItems: 'center' }}>\n                <Grid item xs={6}>\n                    <h1>{t('myIngredients.title-page')}</h1>\n                </Grid>\n                <Grid item xs={6} style={{ textAlign: 'right', alignItems: 'center' }}>\n                    <IconButton onClick={() => setModalOpen(true)}>\n                        <AddCircleOutlineOutlinedIcon style={{ fontSize: 30 }} />\n                    </IconButton>\n                </Grid>\n            </Grid>\n            <SearchBar elements={ingredientsList} onchange={onChange} width={'50%'} />\n            <ListComponent\n                listElements={selectIngredientsCustom(ingredientsDisplay)}\n                onRemoveElement={deleteIngredient}\n            />\n            <Dialog open={modalOpen} style={{}}>\n                <Container>\n                    <DialogTitle>\n                        <h3>{t('myIngredients.add-ingredient')}</h3>\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogActions>\n                            <Grid container spacing={4} style={{ flexDirection: 'column' }}>\n                                <Grid item xs>\n                                    <Grid container spacing={6} style={{ alignItems: 'center' }}>\n                                        <Grid item xs={6}>\n                                            <TextField placeholder={t('myIngredients.textField')} />\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Button>{t('myIngredients.modal-add')}</Button>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                                <Grid item xs>\n                                    <Button onClick={() => setModalOpen(false)}>\n                                        {t('myIngredients.modal-close')}\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </DialogActions>\n                    </DialogContent>\n                </Container>\n            </Dialog>\n        </Container>\n    );\n};\n\nexport default MyIngredients;\n","import { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport TagsBox from '../../components/Tags';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport SearchBar from '../../components/SearchBar';\nimport { Recipe } from '../../slice/recipes/recipesFetch';\n\ntype onChange = (recipes: Recipe[]) => void;\n\ninterface SelectionRecipesListProps {\n    recipes: Recipe[];\n    onChange: onChange;\n}\n\nconst SelectionRecipesList = (props: SelectionRecipesListProps) => {\n    const [checked, setChecked] = React.useState([-1]);\n\n    const handleToggle = (value: number) => () => {\n        const currentIndex = checked.indexOf(value);\n        const newChecked = [...checked];\n\n        if (currentIndex === -1) {\n            newChecked.push(value);\n        } else {\n            newChecked.splice(currentIndex, 1);\n        }\n        setChecked(newChecked);\n\n        const filteredRecipes = props.recipes.filter((recipe, index) => {\n            return newChecked.includes(index);\n        });\n\n        props.onChange(filteredRecipes);\n    };\n\n    return (\n        <List>\n            {props.recipes.map((recipe, index) => {\n                return (\n                    <ListItem divider={true} key={index} onClick={handleToggle(index)}>\n                        <ListItemIcon>\n                            <Checkbox\n                                edge=\"start\"\n                                checked={checked.indexOf(index) !== -1}\n                                tabIndex={-1}\n                                disableRipple\n                            />\n                        </ListItemIcon>\n                        <ListItemText primary={recipe.name} id={index.toString()} />\n                    </ListItem>\n                );\n            })}\n        </List>\n    );\n};\n\ntype onSelected = (recipes: Recipe[]) => void;\n\ninterface SelectionRecipesProps {\n    recipes: Recipe[];\n    onSelected?: onSelected;\n}\n\nconst SelectionRecipes = (props: SelectionRecipesProps): JSX.Element => {\n    const { t } = useTranslation();\n\n    const [recipesDisplay, setRecipesDisplay] = useState(props.recipes);\n\n    const onChange = (ids: string[]) => {\n        const newRecipes: Recipe[] = props.recipes.filter((recipe) => {\n            let resultat = false;\n            for (let i = 0; i < ids.length; i++) {\n                if (recipe.id.toString() === ids[i]) {\n                    resultat = true;\n                }\n            }\n            return resultat;\n        });\n        setRecipesDisplay(newRecipes);\n    };\n\n    return (\n        <Container>\n            <h1>{t('stepper.title-selection')}</h1>\n            <Grid\n                container\n                spacing={2}\n                style={{\n                    textAlign: 'left',\n                }}\n            >\n                <Grid item xs={6}>\n                    <SearchBar onchange={onChange} elements={props.recipes} width=\"100%\" />\n                </Grid>\n                <Grid item xs={6}>\n                    <TagsBox />\n                </Grid>\n            </Grid>\n            <div className=\"SelectionRecipesList\">\n                <SelectionRecipesList\n                    recipes={recipesDisplay}\n                    onChange={(recipes) => {\n                        if (props.onSelected) {\n                            props.onSelected(recipes);\n                        }\n                    }}\n                />\n            </div>\n        </Container>\n    );\n};\n\nexport default SelectionRecipes;\n","import { useTranslation } from 'react-i18next';\nimport List from '@material-ui/core/List';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport React, { FC, useState, useEffect } from 'react';\nimport Container from '@material-ui/core/Container';\n// import { selectRecipes } from '../../slice/recipes/recipesSlice';\n// import { useSelector } from 'react-redux';\nimport { Recipe } from '../../slice/recipes/recipesFetch';\nimport { Button } from '@material-ui/core';\n\nexport type numberPartsRecipe = {\n    recipe_id: number;\n    number_parts: number;\n};\n\ntype onPartsSelected = (numberPartsByRecipe: numberPartsRecipe[]) => void;\n\ninterface SelectionPartsRecipeProps {\n    recipes: Recipe[];\n    onPartsSelected: onPartsSelected;\n}\n\nconst SelectionPartsRecipes: FC<SelectionPartsRecipeProps> = (props) => {\n    const { t } = useTranslation();\n\n    const [defaultValue, setDefaultValue] = useState<number>(2);\n\n    const initialState = props.recipes.map(() => defaultValue);\n    const [parts, setParts] = useState<number[]>(initialState);\n\n    useEffect(() => {\n        let finalPartsRecipe: numberPartsRecipe[] = [];\n        finalPartsRecipe = props.recipes.map((recipe, index) => ({ number_parts: parts[index], recipe_id: recipe.id }));\n\n        props.onPartsSelected(finalPartsRecipe);\n    }, [parts]);\n\n    return (\n        <>\n            <Grid container spacing={0} style={{ alignItems: 'center', display: 'flex' }}>\n                <Grid item xs={2}>\n                    <TextField\n                        style={{ width: '100%', textAlign: 'center' }}\n                        placeholder={t('new_recipe.parts_add')}\n                        value={defaultValue}\n                        variant=\"outlined\"\n                        onChange={(event) => {\n                            const value = Number(event.currentTarget.value);\n                            if (value > 0 || value < 1000) {\n                                setDefaultValue(value);\n                            }\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={2}>\n                    <Button\n                        onClick={() => {\n                            const newValues = props.recipes.map(() => defaultValue);\n                            setParts(newValues);\n                        }}\n                    >\n                        {t('stepper.new-number-parts')}\n                    </Button>\n                </Grid>\n            </Grid>\n            <List>\n                {props.recipes.map((recipe, index) => {\n                    const newState = [...parts];\n\n                    return (\n                        <ListItem divider={true} key={'SelectionPartsRecipes' + index}>\n                            <ListItemText primary={recipe.name} id={index.toString()} />\n\n                            <TextField\n                                value={parts[index]}\n                                placeholder={t('new_recipe.parts_add')}\n                                onChange={(event) => {\n                                    const newParts = Number(event.currentTarget.value);\n                                    if (newParts >= 0 && newParts < 1000) {\n                                        newState[index] = newParts;\n                                        setParts(newState);\n                                    }\n                                }}\n                            />\n                        </ListItem>\n                    );\n                })}\n            </List>\n        </>\n    );\n};\n\ninterface SelectionPartsProps {\n    recipes: Recipe[];\n    onValidateNumberParts: onPartsSelected;\n}\n\nconst SelectionParts: FC<SelectionPartsProps> = (props): JSX.Element => {\n    const { t } = useTranslation();\n\n    return (\n        <Container>\n            <h1>{t('stepper.title-part')}</h1>\n\n            <div className=\"SelectionRecipesList\">\n                <SelectionPartsRecipes\n                    recipes={props.recipes}\n                    onPartsSelected={(numberPartsByRecipe) => {\n                        if (props.onValidateNumberParts) {\n                            props.onValidateNumberParts(numberPartsByRecipe);\n                        }\n                    }}\n                />\n            </div>\n        </Container>\n    );\n};\n\nexport default SelectionParts;\n","import React, { FC, useEffect, useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport { useTranslation } from 'react-i18next';\nimport { unwrapResult } from '@reduxjs/toolkit';\nimport { useHistory } from 'react-router-dom';\nimport List from '@material-ui/core/List';\nimport { ListItem, ListItemText, ListItemSecondaryAction } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddCircleOutlineOutlinedIcon from '@material-ui/icons/AddCircleOutlineOutlined';\nimport { IconButton } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport CheckIcon from '@material-ui/icons/Check';\nimport Autosuggestion from '../../components/Autocomplete';\nimport { useSelector } from 'react-redux';\nimport { token } from '../../slice/user/userSlice';\nimport { ingredients, fetchAddIngredient } from '../../slice/ingredients/ingredientsSlice';\nimport { fetchGetIngredientsByRecipes } from '../../slice/ingredients/ingredientsFetch';\nimport { unities, fetchAddUnity } from '../../slice/unity/unitySlice';\nimport { IngredientsGroceryList } from '../../slice/groceriesLists/groceriesListsFetch';\nimport { useAppDispatch } from '../../app/store';\nimport { numberPartsRecipe } from './RecipesSelection2';\nimport { fetchAddGroceryList } from '../../slice/groceriesLists/groceriesListsSlice';\n\ntype onRemove = (ingredient: IngredientsGroceryList, index: number) => void;\ntype onValidateIngredientsList = (ingredientsList: IngredientsGroceryList[]) => void;\n\ntype IngredientListProps = {\n    ingredients: IngredientsGroceryList[];\n    onRemoveIngredient: onRemove;\n    onValidateList: onValidateIngredientsList;\n};\n\nconst CheckIngredientsList: FC<IngredientListProps> = (props) => {\n    useEffect(() => {\n        props.onValidateList(props.ingredients);\n    }, [props.ingredients]);\n    return (\n        <List>\n            {props.ingredients.map((ingredient, index) => {\n                return (\n                    <ListItem divider={true} key={'CheckIngredientsList' + index}>\n                        <ListItemText\n                            primary={ingredient.ingredient}\n                            secondary={ingredient.quantity + ' ' + ingredient.unity}\n                            id={index.toString()}\n                        />\n                        <ListItemSecondaryAction>\n                            <IconButton\n                                edge=\"end\"\n                                onClick={() => {\n                                    if (props.onRemoveIngredient) {\n                                        props.onRemoveIngredient(ingredient, index);\n                                    }\n                                }}\n                            >\n                                <DeleteIcon style={{ fontSize: 15 }} color=\"primary\" />\n                            </IconButton>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            })}\n        </List>\n    );\n};\n\nexport interface RequestAddGroceryList {\n    ingredients: IngredientsGroceryList[];\n}\n\ninterface AddMoreIngredientsProps {\n    numberPartsByRecipe: numberPartsRecipe[];\n    onValidation: onValidateIngredientsList;\n}\n\nconst AddMoreIngredients: FC<AddMoreIngredientsProps> = (props): JSX.Element => {\n    const { t } = useTranslation();\n\n    const history = useHistory();\n    const dispatch = useAppDispatch();\n\n    const allIngredients = useSelector(ingredients);\n    const allUnities = useSelector(unities);\n    const idToken = useSelector(token);\n\n    const [newIngredientsList, setNewIngredientsList] = useState<RequestAddGroceryList>({\n        ingredients: [],\n    });\n\n    const [ingredientRecipe, setIngredientRecipe] = useState<IngredientsGroceryList>({\n        ingredient: '',\n        ingredient_id: undefined,\n        unity: '',\n        unity_id: undefined,\n        quantity: undefined,\n    });\n\n    const removeIngredientList = (elt: IngredientsGroceryList, index: number) => {\n        if (newIngredientsList.ingredients) {\n            const newingredientRow = newIngredientsList.ingredients.filter((_, i) => i !== index);\n            setNewIngredientsList({ ...newIngredientsList, ingredients: newingredientRow });\n        }\n    };\n\n    useEffect(() => {\n        const getIngredients = fetchGetIngredientsByRecipes(idToken, props.numberPartsByRecipe);\n        const ingredientsList = async () => {\n            const list = await getIngredients;\n            setNewIngredientsList({ ...newIngredientsList, ingredients: list });\n        };\n        ingredientsList();\n    }, []);\n\n    return (\n        <Container>\n            <h1 style={{ marginBottom: 50 }}>{t('stepper.title-ingredientsList')}</h1>\n            <Grid container spacing={4} style={{ alignItems: 'center', marginBottom: 10 }}>\n                <Grid item xs={3}>\n                    <Autosuggestion\n                        label={t('new_recipe.add-ingredient')}\n                        onSelect={(option) => {\n                            setIngredientRecipe({\n                                ...ingredientRecipe,\n                                ingredient_id: option.id,\n                                ingredient: option.name,\n                            });\n                        }}\n                        onAdd={(option) => dispatch(fetchAddIngredient(option))}\n                        options={allIngredients}\n                    />\n                </Grid>\n                <Grid item xs={3}>\n                    <Autosuggestion\n                        label={t('new_recipe.add-unity')}\n                        onSelect={(option) => {\n                            setIngredientRecipe({\n                                ...ingredientRecipe,\n                                unity_id: option.id,\n                                unity: option.name,\n                            });\n                        }}\n                        onAdd={(option) => dispatch(fetchAddUnity(option))}\n                        options={allUnities}\n                    />\n                </Grid>\n                <Grid item xs={3}>\n                    <TextField\n                        label={t('new_recipe.add-quantity')}\n                        variant=\"outlined\"\n                        onChange={(event) =>\n                            setIngredientRecipe({\n                                ...ingredientRecipe,\n                                quantity: Number(event.currentTarget.value),\n                            })\n                        }\n                    />\n                </Grid>\n                <Grid item xs={3}>\n                    <IconButton\n                        onClick={() => {\n                            if (newIngredientsList.ingredients) {\n                                const newIngredientRow = newIngredientsList.ingredients.concat(ingredientRecipe);\n                                setNewIngredientsList({ ...newIngredientsList, ingredients: newIngredientRow });\n                                setIngredientRecipe({\n                                    ...ingredientRecipe,\n                                    ingredient: '',\n                                    ingredient_id: undefined,\n                                    unity: '',\n                                    unity_id: undefined,\n                                    quantity: undefined,\n                                });\n                            }\n                        }}\n                    >\n                        <AddCircleOutlineOutlinedIcon style={{ fontSize: 30 }} />\n                    </IconButton>\n                </Grid>\n            </Grid>\n            <CheckIngredientsList\n                ingredients={newIngredientsList.ingredients}\n                onValidateList={(ingredientsList) => {\n                    if (props.onValidation) {\n                        props.onValidation(ingredientsList);\n                    }\n                }}\n                onRemoveIngredient={removeIngredientList}\n            />\n            <IconButton\n                style={{ marginTop: 10 }}\n                onClick={async () => {\n                    try {\n                        const action = await dispatch(fetchAddGroceryList(newIngredientsList));\n                        const result = unwrapResult(action);\n                        console.log('result: ', result);\n                        history.push(`/groceryList/${result.id}`);\n                    } catch (e) {\n                        return console.error(e);\n                    }\n                }}\n            >\n                <CheckIcon />\n            </IconButton>\n        </Container>\n    );\n};\n\nexport default AddMoreIngredients;\n","import MobileStepper from '@material-ui/core/MobileStepper';\nimport React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport SelectionRecipes from './RecipesSelection1';\nimport SelectionParts, { numberPartsRecipe } from './RecipesSelection2';\nimport AddMoreIngredients from './RecipesSelection3';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport { selectRecipes } from '../../slice/recipes/recipesSlice';\nimport { useSelector } from 'react-redux';\nimport { Recipe } from '../../slice/recipes/recipesFetch';\nimport { IngredientsGroceryList } from '../../slice/groceriesLists/groceriesListsFetch';\n\nconst RecipesSelectionStepper = (): JSX.Element => {\n    const [activeStep, setActiveStep] = useState(0);\n    const [recipesSelected, setRecipesSelected] = useState<Recipe[]>([]);\n    const [numberPartsByRecipe, setnumberPartsByRecipe] = useState<numberPartsRecipe[]>([]);\n    const [ingredientsList, setIngredientsList] = useState<IngredientsGroceryList[]>([]);\n    console.log(ingredientsList);\n\n    const recipes = useSelector(selectRecipes);\n\n    const handleNext = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    const getStepperComponent = (step: number) => {\n        switch (step) {\n            case 0:\n                return (\n                    <SelectionRecipes\n                        recipes={recipes}\n                        onSelected={(recipesSelect) => {\n                            console.log('select: ', recipesSelect);\n                            setRecipesSelected(recipesSelect);\n                        }}\n                    />\n                );\n            case 1:\n                return (\n                    <SelectionParts\n                        recipes={recipesSelected}\n                        onValidateNumberParts={(numberPartsByRecipe) => {\n                            console.log('numberPartsByRecipe: ', numberPartsByRecipe);\n                            setnumberPartsByRecipe(numberPartsByRecipe);\n                        }}\n                    />\n                );\n            case 2:\n                return (\n                    <AddMoreIngredients\n                        numberPartsByRecipe={numberPartsByRecipe}\n                        onValidation={(ingredientsList) => {\n                            console.log('ingredientsList: ', ingredientsList);\n                            setIngredientsList(ingredientsList);\n                        }}\n                    />\n                );\n            default:\n                return 'Unknown step';\n        }\n    };\n\n    return (\n        <Container>\n            <MobileStepper\n                variant=\"progress\"\n                steps={3}\n                position=\"static\"\n                activeStep={activeStep}\n                nextButton={\n                    <Button size=\"small\" onClick={handleNext} disabled={activeStep === 2}>\n                        Next\n                    </Button>\n                }\n                backButton={\n                    <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\n                        Back\n                    </Button>\n                }\n            />\n\n            <Box>{getStepperComponent(activeStep)}</Box>\n        </Container>\n    );\n};\n\nexport default RecipesSelectionStepper;\n","import React, { useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport { useTranslation } from 'react-i18next';\nimport Grid from '@material-ui/core/Grid';\nimport { IconButton } from '@material-ui/core';\nimport AddCircleOutlineOutlinedIcon from '@material-ui/icons/AddCircleOutlineOutlined';\nimport SearchBar from '../../components/SearchBar';\nimport ListComponent from '../../components/List';\nimport { selectGroups, Group } from '../../slice/groups/groupsSlice';\nimport { useSelector } from 'react-redux';\n\nconst Groups = (): JSX.Element => {\n    const groups = useSelector(selectGroups);\n\n    const { t } = useTranslation();\n\n    const [groupsDisplay, setGroupsDisplay] = useState(groups);\n\n    const onchange = (ids: string[]) => {\n        const newGroups: Group[] = groups.filter((group) => {\n            let resultat = false;\n            for (let i = 0; i < ids.length; i++) {\n                if (group.id.toString() === ids[i]) {\n                    resultat = true;\n                }\n            }\n            return resultat;\n        });\n        setGroupsDisplay(newGroups);\n    };\n\n    return (\n        <Container>\n            <Grid container style={{ alignItems: 'center' }}>\n                <Grid item xs={6}>\n                    <h1>{t('groups.title-page')}</h1>\n                </Grid>\n                <Grid item xs={6} style={{ textAlign: 'right', alignItems: 'center' }}>\n                    <IconButton>\n                        <AddCircleOutlineOutlinedIcon style={{ fontSize: 30 }} />\n                    </IconButton>\n                </Grid>\n            </Grid>\n            <Grid>\n                <SearchBar width=\"50%\" onchange={onchange} elements={groups} />\n            </Grid>\n            <ListComponent listElements={groupsDisplay} />\n        </Container>\n    );\n};\n\nexport default Groups;\n","import React, { ChangeEvent, useState } from 'react';\n// Firebase\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport { Button, TextField, Grid } from '@material-ui/core';\n\nconst Firebase = (): JSX.Element => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n    const onChangePassword = (event: ChangeEvent<HTMLInputElement>) => {\n        setPassword(event.target.value);\n    };\n    const onChangeEmail = (event: ChangeEvent<HTMLInputElement>) => {\n        setEmail(event.target.value);\n    };\n\n    const onSignUp = () => {\n        signUpWithEmailPassword(email, password)\n            .then((userCredential) => {\n                console.log(userCredential);\n            })\n            .catch((error) => {\n                const errorCode = error.code;\n                const errorMessage = error.message;\n                console.log('Error: signUpWithEmailPassword, errorCode: ', errorCode);\n                console.log('Error: signUpWithEmailPassword, errorMessage: ', errorMessage);\n            });\n    };\n\n    const onSignIn = () => {\n        signInWithEmailPassword(email, password)\n            .then((userCredential) => {\n                console.log(userCredential);\n            })\n            .catch((error) => {\n                const errorCode = error.code;\n                const errorMessage = error.message;\n                console.log('Error: signInWithEmailPassword, errorCode: ', errorCode);\n                console.log('Error: signInWithEmailPassword, errorMessage: ', errorMessage);\n            });\n    };\n\n    return (\n        <>\n            <Grid container spacing={6} style={{ alignItems: 'left' }}>\n                <Grid item xs>\n                    <TextField type=\"text\" onChange={onChangeEmail} placeholder=\"Enter your email\" />\n                </Grid>\n                <Grid item xs>\n                    <TextField type=\"password\" onChange={onChangePassword} placeholder=\"Enter your password\" />\n                </Grid>\n            </Grid>\n            <Button onClick={onSignIn}>Sign In</Button>\n            <Button onClick={onSignUp}>Create an account</Button>\n        </>\n    );\n};\n\nexport let firebaseId: string;\n\nconst signUpWithEmailPassword = (email: string, password: string) => {\n    return firebase.auth().createUserWithEmailAndPassword(email, password);\n};\n\nconst signInWithEmailPassword = (email: string, password: string) => {\n    return firebase.auth().signInWithEmailAndPassword(email, password);\n};\n\nexport default Firebase;\n","import React, { ChangeEvent, useState } from 'react';\nimport { Button, TextField, Box } from '@material-ui/core';\nimport { fetchCreateUser, updateFirebaseUser, token } from '../../slice/user/userSlice';\nimport { fetchGetIngredients } from '../../slice/ingredients/ingredientsSlice';\nimport { fetchGetUnities } from '../../slice/unity/unitySlice';\nimport { fetchGetAllRecipes } from '../../slice/recipes/recipesSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport firebase from 'firebase/app';\n\nconst SignUp = (): JSX.Element => {\n    const [fullN, setFullName] = useState('');\n\n    const dispatch = useDispatch();\n\n    const idToken = useSelector(token);\n\n    const onChangeFullName = (event: ChangeEvent<HTMLInputElement>) => {\n        setFullName(event.currentTarget.value);\n    };\n\n    return (\n        <>\n            <Box style={{ alignItems: 'left' }}>\n                <TextField type=\"text\" onChange={onChangeFullName} placeholder=\"Enter your name\" />\n            </Box>\n\n            <Button\n                onClick={async () => {\n                    await dispatch(fetchCreateUser({ fullName: fullN }));\n                    await dispatch(fetchGetIngredients(idToken));\n                    await dispatch(fetchGetUnities(idToken));\n                    await dispatch(fetchGetAllRecipes(idToken));\n                }}\n            >\n                Create User\n            </Button>\n            <Button\n                onClick={() => {\n                    firebase.auth().signOut();\n                    dispatch(updateFirebaseUser(''));\n                }}\n            >\n                Sign Out\n            </Button>\n        </>\n    );\n};\n\nexport default SignUp;\n","import React, { useState } from 'react';\nimport Container from '@material-ui/core/Container';\nimport { useTranslation } from 'react-i18next';\nimport SearchBar from '../../components/SearchBar';\nimport ListComponent, { Element } from '../../components/List';\nimport { Unity } from '../../slice/unity/unityFetch';\nimport { unities, fetchDeleteUnity } from '../../slice/unity/unitySlice';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst MyUnities = (): JSX.Element => {\n    const unitiesList = useSelector(unities);\n    const { t } = useTranslation();\n\n    const dispatch = useDispatch();\n\n    const [unitiesCustomDisplay, setUnitiesCustomDisplay] = useState(unitiesList);\n\n    const selectUnitiesCustom = (unitiesElements: Unity[]): Unity[] =>\n        unitiesElements.filter((unity) => {\n            return unity.user_id !== null;\n        });\n\n    const deleteUnity = (unity: Element) => {\n        dispatch(fetchDeleteUnity(unity.id));\n    };\n\n    const onChange = (ids: string[]) => {\n        const newUnities: Unity[] = unitiesList.filter((unity) => {\n            let resultat = false;\n            for (let i = 0; i < ids.length; i++) {\n                if (unity.id.toString() === ids[i]) {\n                    resultat = true;\n                }\n            }\n            return resultat;\n        });\n        setUnitiesCustomDisplay(newUnities);\n    };\n\n    return (\n        <Container>\n            <h1>{t('myUnities.title-page')}</h1>\n            <SearchBar elements={unitiesList} onchange={onChange} width={'50%'} />\n            <ListComponent onRemoveElement={deleteUnity} listElements={selectUnitiesCustom(unitiesCustomDisplay)} />\n        </Container>\n    );\n};\n\nexport default MyUnities;\n","import './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Profile from './containers/profil/Profil';\nimport HomeRecipes from './containers/recipes/Recipes';\nimport MyRecipe from './containers/recipe/Recipe';\nimport NewRecipe from './containers/new-recipe/NewRecipe';\nimport UpdateRecipe from './containers/update-recipe/UpdateRecipe';\nimport React, { useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport ToolsBar from './containers/toolsbar/Toolsbar';\nimport GroceryList from './containers/grocery-list/GroceryList';\nimport MyIngredients from './containers/my-ingredients/MyIngredients';\nimport Paper from '@material-ui/core/Paper';\nimport RecipesSelectionStepper from './containers/stepper/RecipesSelection';\nimport Groups from './containers/groups/Groups';\nimport Firebase from './containers/firebase/Firebase';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchGetAllRecipes } from './slice/recipes/recipesSlice';\nimport { fetchGetIngredients } from './slice/ingredients/ingredientsSlice';\nimport { fetchGetUnities } from './slice/unity/unitySlice';\nimport { isLogged, isCreated, updateIdToken, fetchGetUser, updateFirebaseUser } from './slice/user/userSlice';\nimport { fetchGetLatestGroceryList } from './slice/groceryList/groceryListSlice';\nimport firebase from 'firebase/app';\nimport SignUp from './containers/create-user/CreateUser';\nimport MyUnities from './containers/my-unities/MyUnities';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#ff5722',\n        },\n        secondary: {\n            main: '#0d47a1',\n        },\n    },\n});\n\nconst App = (): JSX.Element => {\n    const dispatch = useDispatch();\n\n    const logged = useSelector(isLogged);\n    const created = useSelector(isCreated);\n\n    const onAuthStateChanged = (user: firebase.User | null) => {\n        console.log('User: ', user);\n        if (user) {\n            const newUser = { firebaseId: user.uid, email: user.email };\n            console.log(user);\n            dispatch(updateFirebaseUser(newUser));\n\n            user.getIdToken()\n                .then((idToken) => {\n                    dispatch(updateIdToken(idToken));\n                    return idToken;\n                })\n                .then((idToken) => {\n                    dispatch(fetchGetUser(idToken));\n                    dispatch(fetchGetIngredients(idToken));\n                    dispatch(fetchGetUnities(idToken));\n                    dispatch(fetchGetAllRecipes(idToken));\n                    dispatch(fetchGetLatestGroceryList(idToken));\n                })\n                .catch((error) => console.log(error));\n        }\n    };\n\n    useEffect(() => {\n        const subscriber = firebase.auth().onIdTokenChanged(onAuthStateChanged);\n        return subscriber; // unsubscribe on unmount\n    }, []);\n\n    const logIn = () => {\n        return (\n            <div>\n                <Box style={{ textAlign: 'right' }}>\n                    <Button\n                        onClick={() => {\n                            firebase.auth().signOut();\n                            dispatch(updateFirebaseUser(''));\n                        }}\n                    >\n                        Sign Out\n                    </Button>\n                </Box>\n                <Router>\n                    <div className=\"App\">\n                        <Route path=\"/recipes\" exact component={HomeRecipes} />\n                        <Route path=\"/profile\" exact component={Profile} />\n                        <Route path=\"/recipe/:id\">\n                            <MyRecipe />\n                        </Route>\n                        <Route path=\"/recipes/update/:id\" exact>\n                            <UpdateRecipe />\n                        </Route>\n                        <Route path={'/recipes/selection'} exact component={RecipesSelectionStepper} />\n                        <Route path={'/profile/my_ingredients'} component={MyIngredients} />\n                        <Route path={'/profile/my_unities'} component={MyUnities} />\n                        <Route path=\"/groups\" component={Groups} />\n                        <Route path=\"/groceryList/:id\">\n                            <GroceryList />\n                        </Route>\n                        <Route path={'/recipes/new_recipe'} exact component={NewRecipe} />\n                    </div>\n                    <Paper elevation={1}>\n                        <ToolsBar\n                            style={{\n                                position: 'fixed',\n                                bottom: 0,\n                                width: '100%',\n                                borderTop: 'thin solid',\n                                background: 'grey',\n                            }}\n                        />\n                    </Paper>\n                </Router>\n            </div>\n        );\n    };\n\n    const logOut = () => {\n        return (\n            <>\n                <Firebase />\n            </>\n        );\n    };\n\n    const createUser = () => {\n        return (\n            <>\n                <SignUp />\n            </>\n        );\n    };\n\n    let composant;\n    if (!logged) {\n        composant = logOut();\n    } else if (logged && created) {\n        composant = logIn();\n    } else if (logged && !created) {\n        composant = createUser();\n    }\n\n    return (\n        <ThemeProvider theme={theme}>\n            <div>{composant}</div>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","/* eslint-disable */\n\nimport { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","// Firebase Config\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\nconst config = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID,\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n};\n\nfirebase.initializeApp(config);\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './i18n';\nimport './containers/firebase/config';\n\n// REDUX\nimport { Provider } from 'react-redux';\nimport store from './app/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    // eslint-disable-next-line prettier/prettier\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}